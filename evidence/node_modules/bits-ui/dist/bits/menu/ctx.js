import { createBitAttrs, generateId, getOptionUpdater, removeUndefined } from "../../internal/index.js";
import { createDropdownMenu } from "@melt-ui/svelte";
import { getContext, setContext } from "svelte";
import { getPositioningUpdater } from "../floating/helpers.js";
const NAME = "menu";
const SUB_NAME = "menu-submenu";
const RADIO_GROUP_NAME = "menu-radiogroup";
const CHECKBOX_ITEM_NAME = "menu-checkboxitem";
const RADIO_ITEM_NAME = "menu-radioitem";
const GROUP_NAME = "menu-group";
const PARTS = [
    "arrow",
    "checkbox-indicator",
    "checkbox-item",
    "content",
    "group",
    "item",
    "label",
    "radio-group",
    "radio-item",
    "radio-indicator",
    "separator",
    "sub-content",
    "sub-trigger",
    "trigger"
];
export const getAttrs = createBitAttrs("menu", PARTS);
export function getCtx() {
    return getContext(NAME);
}
export function setCtx(props) {
    const dropdownMenu = createDropdownMenu({ ...removeUndefined(props), forceVisible: true });
    setContext(NAME, dropdownMenu);
    return {
        ...dropdownMenu,
        updateOption: getOptionUpdater(dropdownMenu.options)
    };
}
export function setSubMenuCtx(props) {
    const { builders: { createSubmenu } } = getCtx();
    const sub = createSubmenu(removeUndefined(props));
    setContext(SUB_NAME, sub);
    return {
        ...sub,
        updateOption: getOptionUpdater(sub.options)
    };
}
export function setRadioGroupCtx(props) {
    const { builders: { createMenuRadioGroup } } = getCtx();
    const radioGroup = createMenuRadioGroup(props);
    setContext(RADIO_GROUP_NAME, radioGroup);
    return radioGroup;
}
export function setRadioItem(value) {
    const dropdownMenu = getContext(RADIO_GROUP_NAME);
    setContext(RADIO_ITEM_NAME, { isChecked: dropdownMenu.helpers.isChecked, value });
    return dropdownMenu;
}
export function getRadioIndicator() {
    return getContext(RADIO_ITEM_NAME);
}
export function getSubTrigger() {
    const submenu = getContext(SUB_NAME);
    return submenu;
}
export function getSubmenuCtx() {
    return getContext(SUB_NAME);
}
export function setCheckboxItem(props) {
    const { builders: { createCheckboxItem } } = getCtx();
    const checkboxItem = createCheckboxItem(removeUndefined(props));
    setContext(CHECKBOX_ITEM_NAME, checkboxItem.states.checked);
    return {
        ...checkboxItem,
        updateOption: getOptionUpdater(checkboxItem.options)
    };
}
export function getCheckboxIndicator() {
    return getContext(CHECKBOX_ITEM_NAME);
}
export function setGroupCtx() {
    const { elements: { group } } = getCtx();
    const id = generateId();
    setContext(GROUP_NAME, id);
    return { group, id };
}
export function getGroupLabel() {
    const id = getContext(GROUP_NAME) ?? generateId();
    const { elements: { groupLabel } } = getCtx();
    return { groupLabel, id };
}
export function setArrow(size = 8) {
    const menu = getCtx();
    menu.options.arrowSize.set(size);
    return menu;
}
const defaultPlacement = {
    side: "bottom",
    align: "center"
};
export function updatePositioning(props) {
    const withDefaults = { ...defaultPlacement, ...props };
    const { options: { positioning } } = getCtx();
    const updater = getPositioningUpdater(positioning);
    updater(withDefaults);
}
const defaultSubPlacement = {
    side: "right",
    align: "start"
};
export function updateSubPositioning(props) {
    const withDefaults = { ...defaultSubPlacement, ...props };
    const { options: { positioning } } = getSubmenuCtx();
    const updater = getPositioningUpdater(positioning);
    updater(withDefaults);
}
