import { createMenubar } from "@melt-ui/svelte";
import { getContext, setContext } from "svelte";
import { createBitAttrs, getOptionUpdater, removeUndefined } from "../../internal/index.js";
import { getPositioningUpdater } from "../floating/helpers.js";
import { getSubmenuCtx } from "../menu/ctx";
const NAME = "menubar";
const MENU_NAME = "menu";
const SUB_NAME = "menu-submenu";
const PARTS = [
    "arrow",
    "checkbox-indicator",
    "checkbox-item",
    "content",
    "group",
    "item",
    "label",
    "radio-group",
    "radio-item",
    "separator",
    "sub-content",
    "sub-trigger",
    "trigger"
];
export const getMenubarAttrs = createBitAttrs(NAME, ["root"]);
export const getAttrs = createBitAttrs("menu", PARTS);
export function setCtx(props) {
    const menubar = createMenubar(removeUndefined(props));
    setContext(NAME, menubar);
    return {
        ...menubar,
        updateOption: getOptionUpdater(menubar.options)
    };
}
export function getCtx() {
    return getContext(NAME);
}
export function setMenuCtx(props) {
    const { builders: { createMenu } } = getCtx();
    const menu = createMenu({ ...removeUndefined(props), forceVisible: false });
    setContext(MENU_NAME, menu);
    return {
        ...menu,
        updateOption: getOptionUpdater(menu.options)
    };
}
export function getMenuCtx() {
    return getContext(MENU_NAME);
}
export function setSubMenuCtx(props) {
    const { builders: { createSubmenu } } = getMenuCtx();
    const sub = createSubmenu(removeUndefined(props));
    setContext(SUB_NAME, sub);
    return {
        ...sub,
        updateOption: getOptionUpdater(sub.options)
    };
}
export function getSubMenuCtx() {
    return getContext(SUB_NAME);
}
const defaultPlacement = {
    side: "bottom",
    align: "center"
};
export function updatePositioning(props) {
    const withDefaults = { ...defaultPlacement, ...props };
    const { options: { positioning } } = getMenuCtx();
    const updater = getPositioningUpdater(positioning);
    updater(withDefaults);
}
const defaultSubPlacement = {
    side: "right",
    align: "start"
};
export function updateSubPositioning(props) {
    const withDefaults = { ...defaultSubPlacement, ...props };
    const { options: { positioning } } = getSubmenuCtx();
    const updater = getPositioningUpdater(positioning);
    updater(withDefaults);
}
