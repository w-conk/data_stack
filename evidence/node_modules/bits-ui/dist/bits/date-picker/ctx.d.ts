/// <reference types="svelte" />
import { type CreateDatePickerProps } from "@melt-ui/svelte";
import { getAttrs as getCalendarAttrs } from "../calendar/ctx.js";
import { getAttrs as getFieldAttrs } from "../date-field/ctx.js";
import { getAttrs as getPopoverAttrs } from "../popover/ctx.js";
import type { Writable } from "svelte/store";
import type { FloatingProps } from "../floating/_types.js";
export { getCalendarAttrs, getFieldAttrs, getPopoverAttrs };
export declare function setCtx(props: CreateDatePickerProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<string>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$open, $contentId, $triggerId]: [boolean, string, string]) => {
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        }, string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$trigger]: [{
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        } & {
            [x: `data-melt-${string}`]: "";
        } & {
            action: (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">;
        }]) => {
            'aria-label': string;
            'data-segment': string;
            'data-state': "open" | "closed";
            'aria-expanded': boolean;
            'aria-controls': string;
            role: "button";
            id: string;
            'aria-haspopup': "dialog";
        }, "popover-trigger">;
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string | HTMLElement | null | undefined>, Writable<string>], <Node_1 extends unknown>(node: HTMLElement) => {
            destroy(): void;
        }, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null | undefined, string]) => {
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-state': string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        close: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, () => {
            readonly type: "button";
        }, string>;
        field: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
        }>], <Node_2 extends unknown>() => {
            destroy(): void;
        }, ([$value, $isInvalid, $disabled, $readonly, $ids]: [import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
        }]) => {
            role: string;
            id: string;
            'aria-labelledby': string;
            'aria-describedby': string;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        segment: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>, Writable<12 | 24 | undefined>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }, {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusout">, ([$segmentValues, $hourCycle, $placeholder, $value, $isInvalid, $disabled, $readonly, $idValues, _,]: [import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj, 12 | 24 | undefined, import("@internationalized/date").DateValue, import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }, string]) => (part: import("@melt-ui/svelte").SegmentPart) => {
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        } | {
            id: string;
            'aria-labelledby': string;
            contentEditable: boolean;
            'aria-describedby': string | undefined;
            tabindex: number | undefined;
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        }, string>;
        label: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<string>], (node: HTMLElement) => {
            destroy: () => void;
        }, ([$isInvalid, $disabled, $labelId]: [boolean, boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<string | undefined>, Writable<boolean>, Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $nameStore, $disabled, $required]: [import("@internationalized/date").DateValue | undefined, string | undefined, boolean, boolean]) => {
            name: string | undefined;
            value: string | undefined;
            'aria-hidden': string;
            hidden: boolean;
            disabled: boolean;
            required: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        validation: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $validationId]: [boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            style: string | undefined;
        }, string>;
        calendar: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<string>, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown">, ([$fullCalendarLabel, $isInvalid, $disabled, $readonly, $calendarId]: [string, boolean, boolean, boolean, string]) => {
            id: string;
            role: string;
            'aria-label': string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-readonly': string | undefined;
        }, string>;
        heading: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$disabled]: [boolean]) => {
            'aria-hidden': boolean;
            'data-disabled': string | undefined;
        }, string>;
        grid: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<boolean>, Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$readonly, $disabled]: [boolean, boolean]) => {
            tabindex: number;
            role: string;
            'aria-readonly': string | undefined;
            'aria-disabled': string | undefined;
            'data-readonly': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        cell: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, Writable<import("@melt-ui/svelte").Matcher | undefined>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isDateSelected, $isDateDisabled, $isDateUnavailable, $isOutsideVisibleMonths, $placeholder,]: [(date: import("@internationalized/date").DateValue) => boolean, (date: import("@internationalized/date").DateValue) => boolean, import("@melt-ui/svelte").Matcher | undefined, (date: import("@internationalized/date").DateValue) => boolean, import("@internationalized/date").DateValue]) => (cellValue: import("@internationalized/date").DateValue, monthValue: import("@internationalized/date").DateValue) => {
            readonly role: "button";
            readonly 'aria-label': string;
            readonly 'aria-selected': true | undefined;
            readonly 'aria-disabled': true | undefined;
            readonly 'data-selected': true | undefined;
            readonly 'data-value': string;
            readonly 'data-disabled': "" | undefined;
            readonly 'data-unavailable': "" | undefined;
            readonly 'data-today': "" | undefined;
            readonly 'data-outside-month': "" | undefined;
            readonly 'data-outside-visible-months': "" | undefined;
            readonly 'data-focused': "" | undefined;
            readonly tabindex: 0 | -1 | undefined;
        }, string>;
        nextButton: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isNextButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
        prevButton: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isPrevButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        placeholder: {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
        };
        value: {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        months: Writable<import("@melt-ui/svelte").Month<import("@internationalized/date").DateValue>[]>;
        weekdays: import("svelte/store").Readable<string[]>;
        headingValue: import("svelte/store").Readable<string>;
        segmentValues: Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>;
        segmentContents: import("svelte/store").Readable<{
            part: import("@melt-ui/svelte").SegmentPart;
            value: string;
        }[]>;
        segmentContentsObj: import("svelte/store").Readable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").SegmentContentObj>;
        isInvalid: import("svelte/store").Readable<boolean>;
    };
    helpers: {
        nextPage: () => void;
        prevPage: () => void;
        nextYear: () => void;
        prevYear: () => void;
        setYear: (year: number) => void;
        setMonth: (month: number) => void;
        isDateDisabled: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateSelected: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateUnavailable: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean | undefined>;
    };
    options: {
        forceVisible: Writable<boolean>;
        defaultOpen: Writable<boolean>;
        onOpenChange: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined>;
        preventScroll: Writable<boolean>;
        portal: Writable<string | HTMLElement | null | undefined>;
        positioning: Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: Writable<number>;
        closeOnOutsideClick: Writable<boolean>;
        closeOnEscape: Writable<boolean>;
        closeFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disableFocusTrap: Writable<boolean>;
        openFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disabled: Writable<boolean>;
        open?: Writable<Writable<boolean> | undefined> | undefined;
        name: Writable<string | undefined>;
        onValueChange?: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue | undefined> | undefined> | undefined;
        defaultValue?: Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        multiple: Writable<false | undefined>;
        required: Writable<boolean | undefined>;
        numberOfMonths: Writable<number | undefined>;
        preventDeselect: Writable<boolean | undefined>;
        minValue: Writable<import("@internationalized/date").DateValue | undefined>;
        maxValue: Writable<import("@internationalized/date").DateValue | undefined>;
        defaultPlaceholder?: Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        onPlaceholderChange?: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue> | undefined> | undefined;
        pagedNavigation: Writable<boolean | undefined>;
        weekStartsOn: Writable<0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined>;
        weekdayFormat: Writable<"narrow" | "short" | "long">;
        isDateDisabled: Writable<import("@melt-ui/svelte").Matcher | undefined>;
        isDateUnavailable: Writable<import("@melt-ui/svelte").Matcher | undefined>;
        fixedWeeks: Writable<boolean | undefined>;
        calendarLabel: Writable<string | undefined>;
        locale: Writable<string>;
        readonly: Writable<boolean>;
        granularity: Writable<import("@melt-ui/svelte").Granularity | undefined>;
        hourCycle: Writable<12 | 24 | undefined>;
        hideTimeZone: Writable<boolean | undefined>;
        dateFieldIds?: Writable<Partial<{
            label: string;
            description: string;
            month: string;
            year: string;
            day: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
            field: string;
            validation: string;
        }> | undefined> | undefined;
        calendarIds?: Writable<Partial<{
            calendar: string;
            accessibleHeading: string;
        }> | undefined> | undefined;
        popoverIds?: Writable<Partial<{
            content: string;
            trigger: string;
        }> | undefined> | undefined;
    };
    ids: {
        dateField: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            label: string;
            description: string;
            month: string;
            year: string;
            day: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
            field: string;
            validation: string;
        }>;
        calendar: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            calendar: string;
            accessibleHeading: string;
        }>;
        popover: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            content: string;
            trigger: string;
        }>;
    };
};
export declare function getCtx(): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<string>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$open, $contentId, $triggerId]: [boolean, string, string]) => {
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        }, string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$trigger]: [{
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        } & {
            [x: `data-melt-${string}`]: "";
        } & {
            action: (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">;
        }]) => {
            'aria-label': string;
            'data-segment': string;
            'data-state': "open" | "closed";
            'aria-expanded': boolean;
            'aria-controls': string;
            role: "button";
            id: string;
            'aria-haspopup': "dialog";
        }, "popover-trigger">;
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string | HTMLElement | null | undefined>, Writable<string>], <Node_1 extends unknown>(node: HTMLElement) => {
            destroy(): void;
        }, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null | undefined, string]) => {
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-state': string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        close: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, () => {
            readonly type: "button";
        }, string>;
        field: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
        }>], <Node_2 extends unknown>() => {
            destroy(): void;
        }, ([$value, $isInvalid, $disabled, $readonly, $ids]: [import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
        }]) => {
            role: string;
            id: string;
            'aria-labelledby': string;
            'aria-describedby': string;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        segment: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>, Writable<12 | 24 | undefined>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }, {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusout">, ([$segmentValues, $hourCycle, $placeholder, $value, $isInvalid, $disabled, $readonly, $idValues, _,]: [import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj, 12 | 24 | undefined, import("@internationalized/date").DateValue, import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }, string]) => (part: import("@melt-ui/svelte").SegmentPart) => {
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        } | {
            id: string;
            'aria-labelledby': string;
            contentEditable: boolean;
            'aria-describedby': string | undefined;
            tabindex: number | undefined;
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        }, string>;
        label: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<string>], (node: HTMLElement) => {
            destroy: () => void;
        }, ([$isInvalid, $disabled, $labelId]: [boolean, boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<string | undefined>, Writable<boolean>, Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $nameStore, $disabled, $required]: [import("@internationalized/date").DateValue | undefined, string | undefined, boolean, boolean]) => {
            name: string | undefined;
            value: string | undefined;
            'aria-hidden': string;
            hidden: boolean;
            disabled: boolean;
            required: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        validation: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $validationId]: [boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            style: string | undefined;
        }, string>;
        calendar: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<string>, import("svelte/store").Readable<boolean>, Writable<boolean>, Writable<boolean>, Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown">, ([$fullCalendarLabel, $isInvalid, $disabled, $readonly, $calendarId]: [string, boolean, boolean, boolean, string]) => {
            id: string;
            role: string;
            'aria-label': string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-readonly': string | undefined;
        }, string>;
        heading: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$disabled]: [boolean]) => {
            'aria-hidden': boolean;
            'data-disabled': string | undefined;
        }, string>;
        grid: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Writable<boolean>, Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$readonly, $disabled]: [boolean, boolean]) => {
            tabindex: number;
            role: string;
            'aria-readonly': string | undefined;
            'aria-disabled': string | undefined;
            'data-readonly': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        cell: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, Writable<import("@melt-ui/svelte").Matcher | undefined>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isDateSelected, $isDateDisabled, $isDateUnavailable, $isOutsideVisibleMonths, $placeholder,]: [(date: import("@internationalized/date").DateValue) => boolean, (date: import("@internationalized/date").DateValue) => boolean, import("@melt-ui/svelte").Matcher | undefined, (date: import("@internationalized/date").DateValue) => boolean, import("@internationalized/date").DateValue]) => (cellValue: import("@internationalized/date").DateValue, monthValue: import("@internationalized/date").DateValue) => {
            readonly role: "button";
            readonly 'aria-label': string;
            readonly 'aria-selected': true | undefined;
            readonly 'aria-disabled': true | undefined;
            readonly 'data-selected': true | undefined;
            readonly 'data-value': string;
            readonly 'data-disabled': "" | undefined;
            readonly 'data-unavailable': "" | undefined;
            readonly 'data-today': "" | undefined;
            readonly 'data-outside-month': "" | undefined;
            readonly 'data-outside-visible-months': "" | undefined;
            readonly 'data-focused': "" | undefined;
            readonly tabindex: 0 | -1 | undefined;
        }, string>;
        nextButton: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isNextButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
        prevButton: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$isPrevButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        placeholder: {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
        };
        value: {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        months: Writable<import("@melt-ui/svelte").Month<import("@internationalized/date").DateValue>[]>;
        weekdays: import("svelte/store").Readable<string[]>;
        headingValue: import("svelte/store").Readable<string>;
        segmentValues: Writable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateSegmentObj | import("@melt-ui/svelte/dist/builders/date-field/_internal/types").DateAndTimeSegmentObj>;
        segmentContents: import("svelte/store").Readable<{
            part: import("@melt-ui/svelte").SegmentPart;
            value: string;
        }[]>;
        segmentContentsObj: import("svelte/store").Readable<import("@melt-ui/svelte/dist/builders/date-field/_internal/types").SegmentContentObj>;
        isInvalid: import("svelte/store").Readable<boolean>;
    };
    helpers: {
        nextPage: () => void;
        prevPage: () => void;
        nextYear: () => void;
        prevYear: () => void;
        setYear: (year: number) => void;
        setMonth: (month: number) => void;
        isDateDisabled: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateSelected: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateUnavailable: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean | undefined>;
    };
    options: {
        forceVisible: Writable<boolean>;
        defaultOpen: Writable<boolean>;
        onOpenChange: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined>;
        preventScroll: Writable<boolean>;
        portal: Writable<string | HTMLElement | null | undefined>;
        positioning: Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: Writable<number>;
        closeOnOutsideClick: Writable<boolean>;
        closeOnEscape: Writable<boolean>;
        closeFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disableFocusTrap: Writable<boolean>;
        openFocus: Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disabled: Writable<boolean>;
        open?: Writable<Writable<boolean> | undefined> | undefined;
        name: Writable<string | undefined>;
        onValueChange?: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue | undefined> | undefined> | undefined;
        defaultValue?: Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        multiple: Writable<false | undefined>;
        required: Writable<boolean | undefined>;
        numberOfMonths: Writable<number | undefined>;
        preventDeselect: Writable<boolean | undefined>;
        minValue: Writable<import("@internationalized/date").DateValue | undefined>;
        maxValue: Writable<import("@internationalized/date").DateValue | undefined>;
        defaultPlaceholder?: Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        onPlaceholderChange?: Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@internationalized/date").DateValue> | undefined> | undefined;
        pagedNavigation: Writable<boolean | undefined>;
        weekStartsOn: Writable<0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined>;
        weekdayFormat: Writable<"narrow" | "short" | "long">;
        isDateDisabled: Writable<import("@melt-ui/svelte").Matcher | undefined>;
        isDateUnavailable: Writable<import("@melt-ui/svelte").Matcher | undefined>;
        fixedWeeks: Writable<boolean | undefined>;
        calendarLabel: Writable<string | undefined>;
        locale: Writable<string>;
        readonly: Writable<boolean>;
        granularity: Writable<import("@melt-ui/svelte").Granularity | undefined>;
        hourCycle: Writable<12 | 24 | undefined>;
        hideTimeZone: Writable<boolean | undefined>;
        dateFieldIds?: Writable<Partial<{
            label: string;
            description: string;
            month: string;
            year: string;
            day: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
            field: string;
            validation: string;
        }> | undefined> | undefined;
        calendarIds?: Writable<Partial<{
            calendar: string;
            accessibleHeading: string;
        }> | undefined> | undefined;
        popoverIds?: Writable<Partial<{
            content: string;
            trigger: string;
        }> | undefined> | undefined;
    };
    ids: {
        dateField: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            label: string;
            description: string;
            month: string;
            year: string;
            day: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
            field: string;
            validation: string;
        }>;
        calendar: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            calendar: string;
            accessibleHeading: string;
        }>;
        popover: import("@melt-ui/svelte/internal/helpers").ToWritableStores<{
            content: string;
            trigger: string;
        }>;
    };
};
export declare function updatePositioning(props: FloatingProps): void;
