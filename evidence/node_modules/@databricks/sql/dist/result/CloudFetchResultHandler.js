"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer");
const node_fetch_1 = __importDefault(require("node-fetch"));
class CloudFetchResultHandler {
    constructor(context, source) {
        this.pendingLinks = [];
        this.downloadTasks = [];
        this.context = context;
        this.source = source;
    }
    hasMore() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pendingLinks.length > 0 || this.downloadTasks.length > 0) {
                return true;
            }
            return this.source.hasMore();
        });
    }
    fetchNext(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.source.fetchNext(options);
            (_a = data === null || data === void 0 ? void 0 : data.resultLinks) === null || _a === void 0 ? void 0 : _a.forEach((link) => {
                this.pendingLinks.push(link);
            });
            const clientConfig = this.context.getConfig();
            const freeTaskSlotsCount = clientConfig.cloudFetchConcurrentDownloads - this.downloadTasks.length;
            if (freeTaskSlotsCount > 0) {
                const links = this.pendingLinks.splice(0, freeTaskSlotsCount);
                const tasks = links.map((link) => this.downloadLink(link));
                this.downloadTasks.push(...tasks);
            }
            const batch = yield this.downloadTasks.shift();
            return batch ? [batch] : [];
        });
    }
    downloadLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Date.now() >= link.expiryTime.toNumber()) {
                throw new Error('CloudFetch link has expired');
            }
            const response = yield this.fetch(link.fileLink);
            if (!response.ok) {
                throw new Error(`CloudFetch HTTP error ${response.status} ${response.statusText}`);
            }
            const result = yield response.arrayBuffer();
            return buffer_1.Buffer.from(result);
        });
    }
    fetch(url, init) {
        return __awaiter(this, void 0, void 0, function* () {
            const connectionProvider = yield this.context.getConnectionProvider();
            const agent = yield connectionProvider.getAgent();
            return (0, node_fetch_1.default)(url, Object.assign({ agent }, init));
        });
    }
}
exports.default = CloudFetchResultHandler;
//# sourceMappingURL=CloudFetchResultHandler.js.map