"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ArrowResultHandler {
    constructor(context, source, arrowSchema) {
        this.context = context;
        this.source = source;
        this.arrowSchema = arrowSchema;
    }
    hasMore() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.arrowSchema) {
                return false;
            }
            return this.source.hasMore();
        });
    }
    fetchNext(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.arrowSchema) {
                return [];
            }
            const rowSet = yield this.source.fetchNext(options);
            const batches = [];
            (_a = rowSet === null || rowSet === void 0 ? void 0 : rowSet.arrowBatches) === null || _a === void 0 ? void 0 : _a.forEach((arrowBatch) => {
                if (arrowBatch.batch) {
                    batches.push(arrowBatch.batch);
                }
            });
            if (batches.length === 0) {
                return [];
            }
            return [this.arrowSchema, ...batches];
        });
    }
}
exports.default = ArrowResultHandler;
//# sourceMappingURL=ArrowResultHandler.js.map