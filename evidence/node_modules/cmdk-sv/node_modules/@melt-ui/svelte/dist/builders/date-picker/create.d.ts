/// <reference types="svelte" />
import type { CreateDatePickerProps } from './types.js';
import type { MeltActionReturn } from '../../internal/types.js';
import type { DatePickerEvents } from './events.js';
export declare function createDatePicker(props?: CreateDatePickerProps): {
    elements: {
        trigger: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => MeltActionReturn<"click" | "keydown">, ([$open, $contentId, $triggerId]: [boolean, string, string]) => {
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        }, string>], (node: HTMLElement) => MeltActionReturn<DatePickerEvents['trigger']>, ([$trigger]: [{
            readonly role: "button";
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'aria-controls': string;
            readonly id: string;
        } & {
            [x: `data-melt-${string}`]: "";
        } & {
            action: (node: HTMLElement) => MeltActionReturn<"click" | "keydown">;
        }]) => {
            'aria-label': string;
            'data-segment': string;
            'data-state': "open" | "closed";
            'aria-expanded': boolean;
            'aria-controls': string;
            role: "button";
            id: string;
            'aria-haspopup': "dialog";
        }, "popover-trigger">;
        content: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string | HTMLElement | null | undefined>, import("svelte/store").Writable<string>], <Node_1 extends any>(node: HTMLElement) => {
            destroy(): void;
        }, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null | undefined, string]) => {
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-state': string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        close: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => MeltActionReturn<"click" | "keydown">, () => {
            readonly type: "button";
        }, string>;
        field: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
        }>], <Node_2 extends any>() => {
            destroy(): void;
        }, ([$value, $isInvalid, $disabled, $readonly, $ids]: [import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
        }]) => {
            role: string;
            id: string;
            'aria-labelledby': string;
            'aria-describedby': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        segment: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Writable<import("../date-field/_internal/types.js").DateSegmentObj | import("../date-field/_internal/types.js").DateAndTimeSegmentObj>, import("svelte/store").Writable<12 | 24 | undefined>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }, {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Readable<{
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }>, import("svelte/store").Writable<string>], (node: HTMLElement) => MeltActionReturn<"click" | "focusout" | "keydown">, ([$segmentValues, $hourCycle, $placeholder, $value, $isInvalid, $disabled, $readonly, $idValues, _,]: [import("../date-field/_internal/types.js").DateSegmentObj | import("../date-field/_internal/types.js").DateAndTimeSegmentObj, 12 | 24 | undefined, import("@internationalized/date").DateValue, import("@internationalized/date").DateValue | undefined, boolean, boolean, boolean, {
            field: string;
            label: string;
            description: string;
            validation: string;
            day: string;
            month: string;
            year: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
        }, string]) => (part: import("../date-field/_internal/types.js").SegmentPart) => {
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        } | {
            id: string;
            'aria-labelledby': string;
            contentEditable: boolean;
            'aria-describedby': string | undefined;
            tabindex: number | undefined;
            'aria-invalid': string | undefined;
            'aria-disabled': string | undefined;
            'aria-readonly': string | undefined;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-segment': string;
        }, string>;
        label: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $disabled, $labelId]: [boolean, boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        hiddenInput: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string | undefined>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $nameStore, $disabled, $required]: [import("@internationalized/date").DateValue | undefined, string | undefined, boolean, boolean]) => {
            name: string | undefined;
            value: string | undefined;
            'aria-hidden': string;
            hidden: boolean;
            disabled: boolean;
            required: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        validation: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isInvalid, $validationId]: [boolean, string]) => {
            id: string;
            'data-invalid': string | undefined;
            style: string | undefined;
        }, string>;
        calendar: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<string>, import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>], (node: HTMLElement) => MeltActionReturn<"keydown">, ([$fullCalendarLabel, $isInvalid, $disabled, $readonly, $calendarId]: [string, boolean, boolean, boolean, string]) => {
            id: string;
            role: string;
            'aria-label': string;
            'data-invalid': string | undefined;
            'data-disabled': string | undefined;
            'data-readonly': string | undefined;
        }, string>;
        heading: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$disabled]: [boolean]) => {
            'aria-hidden': boolean;
            'data-disabled': string | undefined;
        }, string>;
        grid: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$readonly, $disabled, $gridId]: [boolean, boolean, string]) => {
            tabindex: number;
            id: string;
            role: string;
            'aria-readonly': string | undefined;
            'aria-disabled': string | undefined;
            'data-readonly': string | undefined;
            'data-disabled': string | undefined;
        }, string>;
        cell: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, import("svelte/store").Writable<import("../../internal/helpers/date/index.js").Matcher | undefined>, import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>, {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            add: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            subtract: (duration: import("@internationalized/date").DateTimeDuration | import("@internationalized/date").DateDuration) => void;
            setDate: (fields: import("@internationalized/date").DateFields | (import("@internationalized/date").DateFields & import("@internationalized/date").TimeFields), disambiguation?: import("@internationalized/date").Disambiguation | undefined) => void;
            reset: () => void;
            toWritable: () => {
                set: (this: void, value: import("@internationalized/date").DateValue) => void;
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
            };
            nextPage: (amount: number) => void;
            prevPage: (amount: number) => void;
        }], (node: HTMLElement) => MeltActionReturn<"click">, ([$isDateSelected, $isDateDisabled, $isDateUnavailable, $isOutsideVisibleMonths, $placeholder,]: [(date: import("@internationalized/date").DateValue) => boolean, (date: import("@internationalized/date").DateValue) => boolean, import("../../internal/helpers/date/index.js").Matcher | undefined, (date: import("@internationalized/date").DateValue) => boolean, import("@internationalized/date").DateValue]) => (cellValue: import("@internationalized/date").DateValue, monthValue: import("@internationalized/date").DateValue) => {
            readonly role: "button";
            readonly 'aria-label': string;
            readonly 'aria-selected': true | undefined;
            readonly 'aria-disabled': true | undefined;
            readonly 'data-selected': true | undefined;
            readonly 'data-value': string;
            readonly 'data-disabled': "" | undefined;
            readonly 'data-unavailable': "" | undefined;
            readonly 'data-today': "" | undefined;
            readonly 'data-outside-month': "" | undefined;
            readonly 'data-outside-visible-months': "" | undefined;
            readonly 'data-focused': "" | undefined;
            readonly tabindex: 0 | -1 | undefined;
            readonly 'data-calendar-cell': "";
        }, string>;
        nextButton: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => MeltActionReturn<"click">, ([$isNextButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
        prevButton: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], (node: HTMLElement) => MeltActionReturn<"click">, ([$isPrevButtonDisabled]: [boolean]) => {
            role: string;
            'aria-label': string;
            'aria-disabled': string | undefined;
            'data-disabled': string | undefined;
            disabled: boolean | undefined;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        placeholder: {
            set: (this: void, value: import("@internationalized/date").DateValue) => void;
            subscribe: (this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue> | undefined) => import("svelte/store").Unsubscriber;
            update: (this: void, updater: import("svelte/store").Updater<import("@internationalized/date").DateValue>) => void;
        };
        value: {
            update: (updater: import("svelte/store").Updater<import("@internationalized/date").DateValue | undefined>, sideEffect?: ((newValue: import("@internationalized/date").DateValue | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@internationalized/date").DateValue | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@internationalized/date").DateValue | undefined>, invalidate?: import("svelte/store").Invalidator<import("@internationalized/date").DateValue | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        months: import("svelte/store").Writable<import("../../internal/helpers/date/index.js").Month<import("@internationalized/date").DateValue>[]>;
        daysOfWeek: import("svelte/store").Readable<string[]>;
        headingValue: import("svelte/store").Readable<string>;
        segmentValues: import("svelte/store").Writable<import("../date-field/_internal/types.js").DateSegmentObj | import("../date-field/_internal/types.js").DateAndTimeSegmentObj>;
        segmentContents: import("svelte/store").Readable<{
            part: import("../date-field/_internal/types.js").SegmentPart;
            value: string;
        }[]>;
        segmentContentsObj: import("svelte/store").Readable<import("../date-field/_internal/types.js").SegmentContentObj>;
        isInvalid: import("svelte/store").Readable<boolean>;
    };
    helpers: {
        nextPage: () => void;
        prevPage: () => void;
        nextYear: () => void;
        prevYear: () => void;
        setYear: (year: number) => void;
        setMonth: (month: number) => void;
        isDateDisabled: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateSelected: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean>;
        isDateUnavailable: import("svelte/store").Readable<(date: import("@internationalized/date").DateValue) => boolean | undefined>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
        forceVisible: import("svelte/store").Writable<boolean>;
        name: import("svelte/store").Writable<string | undefined>;
        onValueChange?: import("svelte/store").Writable<import("../../internal/helpers/index.js").ChangeFn<import("@internationalized/date").DateValue | undefined> | undefined> | undefined;
        defaultValue?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        multiple: import("svelte/store").Writable<false | undefined>;
        required: import("svelte/store").Writable<boolean | undefined>;
        defaultOpen: import("svelte/store").Writable<boolean | undefined>;
        onOpenChange: import("svelte/store").Writable<import("../../internal/helpers/index.js").ChangeFn<boolean> | undefined>;
        preventScroll: import("svelte/store").Writable<boolean>;
        portal: import("svelte/store").Writable<string | HTMLElement | null | undefined>;
        positioning: import("svelte/store").Writable<import("../../internal/actions/index.js").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: import("svelte/store").Writable<number | undefined>;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        closeFocus: import("svelte/store").Writable<import("../../internal/helpers/index.js").FocusProp | undefined>;
        numberOfMonths: import("svelte/store").Writable<number | undefined>;
        preventDeselect: import("svelte/store").Writable<boolean | undefined>;
        minValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        maxValue: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined>;
        defaultPlaceholder?: import("svelte/store").Writable<import("@internationalized/date").DateValue | undefined> | undefined;
        onPlaceholderChange?: import("svelte/store").Writable<import("../../internal/helpers/index.js").ChangeFn<import("@internationalized/date").DateValue> | undefined> | undefined;
        pagedNavigation: import("svelte/store").Writable<boolean | undefined>;
        weekStartsOn: import("svelte/store").Writable<0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined>;
        isDateDisabled: import("svelte/store").Writable<import("../../internal/helpers/date/index.js").Matcher | undefined>;
        isDateUnavailable: import("svelte/store").Writable<import("../../internal/helpers/date/index.js").Matcher | undefined>;
        fixedWeeks: import("svelte/store").Writable<boolean | undefined>;
        calendarLabel: import("svelte/store").Writable<string | undefined>;
        locale: import("svelte/store").Writable<string>;
        readonly: import("svelte/store").Writable<boolean>;
        granularity: import("svelte/store").Writable<import("../../internal/helpers/date/index.js").Granularity | undefined>;
        hourCycle: import("svelte/store").Writable<12 | 24 | undefined>;
        hideTimeZone: import("svelte/store").Writable<boolean | undefined>;
        dateFieldIds?: import("svelte/store").Writable<Partial<{
            label: string;
            description: string;
            month: string;
            year: string;
            day: string;
            hour: string;
            minute: string;
            second: string;
            dayPeriod: string;
            timeZoneName: string;
            field: string;
            validation: string;
        }> | undefined> | undefined;
        calendarIds?: import("svelte/store").Writable<Partial<{
            grid: string;
            calendar: string;
            accessibleHeading: string;
        }> | undefined> | undefined;
        popoverIds?: import("svelte/store").Writable<{
            content: string;
            trigger: string;
        } | undefined> | undefined;
        disableFocusTrap: import("svelte/store").Writable<boolean | undefined>;
        openFocus: import("svelte/store").Writable<import("../../internal/helpers/index.js").FocusProp | undefined>;
    };
    ids: {
        dateField: {
            label: import("svelte/store").Writable<string>;
            description: import("svelte/store").Writable<string>;
            month: import("svelte/store").Writable<string>;
            year: import("svelte/store").Writable<string>;
            day: import("svelte/store").Writable<string>;
            hour: import("svelte/store").Writable<string>;
            minute: import("svelte/store").Writable<string>;
            second: import("svelte/store").Writable<string>;
            dayPeriod: import("svelte/store").Writable<string>;
            timeZoneName: import("svelte/store").Writable<string>;
            field: import("svelte/store").Writable<string>;
            validation: import("svelte/store").Writable<string>;
        };
        calendar: {
            grid: import("svelte/store").Writable<string>;
            calendar: import("svelte/store").Writable<string>;
            accessibleHeading: import("svelte/store").Writable<string>;
        };
        popover: {
            content: import("svelte/store").Writable<string>;
            trigger: import("svelte/store").Writable<string>;
        };
    };
};
