/// <reference types="svelte" />
import type { MeltActionReturn } from '../../internal/types.js';
import { type Readable } from 'svelte/store';
import type { LinkPreviewEvents } from './events.js';
import type { CreateLinkPreviewProps } from './types.js';
export declare const linkPreviewIdParts: readonly ["trigger", "content"];
export type LinkPreviewIdParts = typeof linkPreviewIdParts;
export declare function createLinkPreview(props?: CreateLinkPreviewProps): {
    ids: {
        content: import("svelte/store").Writable<string>;
        trigger: import("svelte/store").Writable<string>;
    };
    elements: {
        trigger: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => MeltActionReturn<LinkPreviewEvents['trigger']>, ([$open, $triggerId, $contentId]: [boolean, string, string]) => {
            role: "button";
            'aria-haspopup': "dialog";
            'aria-expanded': boolean;
            'data-state': string;
            'aria-controls': string;
            id: string;
        }, string>;
        content: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string | HTMLElement | null>, import("svelte/store").Writable<string>], (node: HTMLElement) => MeltActionReturn<LinkPreviewEvents['content']>, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null, string]) => {
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-state': string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
        forceVisible: import("svelte/store").Writable<boolean>;
        defaultOpen: import("svelte/store").Writable<boolean>;
        onOpenChange?: import("svelte/store").Writable<import("../../internal/helpers/index.js").ChangeFn<boolean> | undefined> | undefined;
        portal: import("svelte/store").Writable<string | HTMLElement | null>;
        positioning: import("svelte/store").Writable<import("../../internal/actions/index.js").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: import("svelte/store").Writable<number>;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        openDelay: import("svelte/store").Writable<number>;
        closeDelay: import("svelte/store").Writable<number>;
    };
};
