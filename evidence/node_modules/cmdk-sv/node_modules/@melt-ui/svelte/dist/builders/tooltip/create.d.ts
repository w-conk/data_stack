/// <reference types="svelte" />
import type { MeltActionReturn } from '../../internal/types.js';
import { type Writable } from 'svelte/store';
import type { TooltipEvents } from './events.js';
import type { CreateTooltipProps } from './types.js';
export declare const tooltipIdParts: readonly ["trigger", "content"];
export type TooltipIdParts = typeof tooltipIdParts;
export declare function createTooltip(props?: CreateTooltipProps): {
    ids: {
        content: Writable<string>;
        trigger: Writable<string>;
    };
    elements: {
        trigger: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[Writable<string>, Writable<string>], (node: HTMLElement) => MeltActionReturn<TooltipEvents['trigger']>, ([$contentId, $triggerId]: [string, string]) => {
            'aria-describedby': string;
            id: string;
        }, string>;
        content: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, Writable<string | HTMLElement | null>, Writable<string>], (node: HTMLElement) => MeltActionReturn<TooltipEvents['content']>, ([$isVisible, $portal, $contentId]: [boolean, string | HTMLElement | null, string]) => {
            role: string;
            hidden: boolean | undefined;
            tabindex: number;
            style: string;
            id: string;
            'data-portal': string | undefined;
        }, string>;
        arrow: import("../../internal/helpers/index.js").ExplicitBuilderReturn<Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        forceVisible: Writable<boolean>;
        defaultOpen: Writable<boolean>;
        onOpenChange?: Writable<import("../../internal/helpers/index.js").ChangeFn<boolean> | undefined> | undefined;
        portal: Writable<string | HTMLElement | null>;
        positioning: Writable<import("../../internal/actions/index.js").FloatingConfig | {
            placement: "bottom";
        }>;
        arrowSize: Writable<number>;
        closeOnEscape: Writable<boolean>;
        group: Writable<string | boolean | undefined>;
        openDelay: Writable<number>;
        closeDelay: Writable<number>;
        closeOnPointerDown: Writable<boolean>;
        disableHoverableContent: Writable<boolean>;
    };
};
