/// <reference types="svelte" />
import { type CreateSelectProps, type Select as SelectReturn } from "@melt-ui/svelte";
export declare const getAttrs: (part: "value" | "arrow" | "label" | "content" | "item" | "trigger" | "group" | "input") => Record<string, string>;
type GetReturn = SelectReturn;
export declare function getCtx(): GetReturn;
export declare function setCtx(props: CreateSelectProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        group: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            role: string;
            'aria-labelledby': string;
        }, string>;
        groupLabel: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            id: string;
        }, string>;
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<HTMLElement | null>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "input">, ([$open, $highlightedItem, $disabled, $menuId, $triggerId, $labelId]: [boolean, HTMLElement | null, boolean, string, string, string]) => {
            readonly 'aria-activedescendant': string | undefined;
            readonly 'aria-autocomplete': "list";
            readonly 'aria-controls': string;
            readonly 'aria-expanded': boolean;
            readonly 'aria-labelledby': string;
            readonly id: string;
            readonly role: "combobox";
            readonly disabled: true | undefined;
        }, string>;
        option: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, sideEffect?: ((newValue: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, invalidate?: import("svelte/store").Invalidator<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined> | undefined): import("svelte/store").Unsubscriber;
        }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click" | "pointermove">, ([$selected]: [import("@melt-ui/svelte").ComboboxOption<unknown> | undefined]) => (props: import("@melt-ui/svelte").ComboboxOptionProps<unknown>) => {
            readonly 'data-value': string;
            readonly 'data-label': string | undefined;
            readonly 'data-disabled': true | undefined;
            readonly 'aria-disabled': true | undefined;
            readonly 'aria-selected': boolean;
            readonly 'data-selected': "" | undefined;
            readonly id: string;
            readonly role: "option";
        }, string>;
        menu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"pointerleave">, ([$isVisible, $menuId]: [boolean, string]) => {
            readonly hidden: true | undefined;
            readonly id: string;
            readonly role: "listbox";
            readonly style: string;
        }, string>;
        label: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"mousedown">, ([$labelId, $triggerId]: [string, string]) => {
            id: string;
            for: string;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, sideEffect?: ((newValue: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, invalidate?: import("svelte/store").Invalidator<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string | undefined>], import("svelte/action").Action<any, any, Record<never, any>>, ([$selected, $required, $name]: [import("@melt-ui/svelte").ComboboxOption<unknown> | undefined, boolean, string | undefined]) => {
            required: boolean | undefined;
            value: unknown;
            name: string | undefined;
            type: string;
            'aria-hidden': boolean;
            hidden: boolean;
            tabIndex: number;
            style: string;
        }, string>;
        arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number | undefined>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number | undefined) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
    };
    states: {
        selectedLabel: import("svelte/store").Readable<string>;
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        selected: {
            update: (updater: import("svelte/store").Updater<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, sideEffect?: ((newValue: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void) | undefined) => void;
            set: (this: void, value: import("@melt-ui/svelte").ComboboxOption<unknown> | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>, invalidate?: import("svelte/store").Invalidator<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        highlighted: import("svelte/store").Readable<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined>;
        highlightedItem: import("svelte/store").Writable<HTMLElement | null>;
    };
    ids: {
        label: import("svelte/store").Writable<string>;
        menu: import("svelte/store").Writable<string>;
        trigger: import("svelte/store").Writable<string>;
    };
    helpers: {
        isSelected: import("svelte/store").Readable<(value: unknown) => boolean>;
        isHighlighted: import("svelte/store").Readable<(item: unknown) => boolean>;
        closeMenu: () => void;
    };
    options: {
        multiple: import("svelte/store").Writable<false>;
        disabled: import("svelte/store").Writable<boolean>;
        forceVisible: import("svelte/store").Writable<boolean>;
        name: import("svelte/store").Writable<string | undefined>;
        required: import("svelte/store").Writable<boolean>;
        onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
        preventScroll: import("svelte/store").Writable<boolean>;
        portal: import("svelte/store").Writable<string | HTMLElement | null | undefined>;
        positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "bottom";
            sameWidth: true;
        }>;
        arrowSize?: import("svelte/store").Writable<number | undefined> | undefined;
        scrollAlignment: import("svelte/store").Writable<"center" | "nearest">;
        loop: import("svelte/store").Writable<boolean>;
        defaultSelected?: import("svelte/store").Writable<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined> | undefined;
        selected?: import("svelte/store").Writable<import("svelte/store").Writable<import("@melt-ui/svelte").ComboboxOption<unknown>> | undefined> | undefined;
        onSelectedChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<import("@melt-ui/svelte").ComboboxOption<unknown> | undefined> | undefined> | undefined;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        typeahead: import("svelte/store").Writable<boolean>;
        highlightOnHover: import("svelte/store").Writable<boolean>;
    };
};
export declare function setGroupCtx(): {
    group: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
        role: string;
        'aria-labelledby': string;
    }, string>;
    id: string;
};
export declare function setItemCtx(value: unknown): GetReturn;
export declare function getGroupLabel(): {
    groupLabel: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
        id: string;
    }, string>;
    id: string;
};
export declare function getItemIndicator(): {
    value: unknown;
    isSelected: import("svelte/store").Readable<(value: unknown) => boolean>;
};
export declare function setArrow(size?: number): GetReturn;
export {};
