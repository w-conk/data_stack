/// <reference types="svelte" />
import { type Menubar as MenubarReturn, type CreateMenubarProps as MenubarProps, type MenubarMenu as MenubarMenuReturn, type MenubarMenuRadioGroup as MenubarRadioGroupReturn, type CreateMenuRadioGroupProps, type CreateMenubarSubmenuProps, type CreateMenubarMenuProps, type MenubarMenuSubmenu as MenubarSubReturn, type CreateMenuCheckboxItemProps } from "@melt-ui/svelte";
import type { Readable } from "svelte/store";
export declare const getAttrs: (part: "arrow" | "label" | "radio-group" | "separator" | "root" | "content" | "item" | "trigger" | "group" | "checkbox-indicator" | "checkbox-item" | "radio-item" | "sub-content" | "sub-trigger") => Record<string, string>;
export declare function setCtx(props: MenubarProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        menubar: import("svelte/store").Writable<string>;
    };
    elements: {
        menubar: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<string>], (node: HTMLElement) => {
            destroy?: undefined;
        } | {
            destroy: typeof import("@melt-ui/svelte/internal/helpers").noop;
        }, ([$menubarId]: [string]) => {
            role: string;
            'data-melt-menubar': string;
            'data-orientation': string;
            id: string;
        }, string>;
    };
    builders: {
        createMenu: (props?: import("@melt-ui/svelte/dist/builders/menu")._CreateMenuProps | undefined) => {
            ids: {
                menu: import("svelte/store").Writable<string>;
                trigger: import("svelte/store").Writable<string>;
            };
            elements: {
                menu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string | HTMLElement | null | undefined>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown">, ([$isVisible, $portal, $menuId, $triggerId, $menubarId]: [boolean, string | HTMLElement | null | undefined, string, string, string]) => {
                    readonly role: "menu";
                    readonly hidden: true | undefined;
                    readonly style: string;
                    readonly id: string;
                    readonly 'aria-labelledby': string;
                    readonly 'data-state': "open" | "closed";
                    readonly 'data-melt-scope': string;
                    readonly 'data-portal': "" | undefined;
                    readonly tabindex: -1;
                }, string>;
                trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "pointerenter">, ([$rootOpen, $menuId, $triggerId]: [boolean, string, string]) => {
                    readonly 'aria-controls': string;
                    readonly 'aria-expanded': boolean;
                    readonly 'data-state': "open" | "closed";
                    readonly id: string;
                    readonly 'aria-haspopup': "menu";
                    readonly 'data-orientation': "horizontal";
                    readonly role: "menuitem";
                }, string>;
                item: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, () => {
                    role: string;
                    tabindex: number;
                    'data-orientation': string;
                }, string>;
                arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number | undefined>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number | undefined) => {
                    'data-arrow': boolean;
                    style: string;
                }, string>;
                separator: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").Orientation>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$orientation, $decorative]: [import("@melt-ui/svelte/internal/types").Orientation, boolean]) => {
                    role: string;
                    'aria-orientation': "vertical" | undefined;
                    'aria-hidden': boolean;
                    'data-orientation': import("@melt-ui/svelte/internal/types").Orientation;
                }, "separator">;
                group: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
                    role: string;
                    'aria-labelledby': string;
                }, string>;
                groupLabel: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
                    id: string;
                }, string>;
            };
            builders: {
                createCheckboxItem: (props?: import("@melt-ui/svelte/dist/builders/menu")._CheckboxItemProps | undefined) => {
                    elements: {
                        checkboxItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
                            set: (this: void, value: boolean | "indeterminate") => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
                        }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$checked, $disabled]: [boolean | "indeterminate", boolean]) => {
                            readonly role: "menuitemcheckbox";
                            readonly tabindex: -1;
                            readonly 'data-orientation': "vertical";
                            readonly 'aria-checked': "false" | "true" | "mixed";
                            readonly 'data-disabled': true | undefined;
                            readonly 'data-state': "checked" | "indeterminate" | "unchecked";
                        }, string>;
                    };
                    states: {
                        checked: {
                            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
                            set: (this: void, value: boolean | "indeterminate") => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
                        };
                    };
                    options: {
                        disabled: import("svelte/store").Writable<boolean>;
                    };
                };
                createSubmenu: (args?: import("@melt-ui/svelte/dist/builders/menu")._CreateSubmenuProps | undefined) => {
                    ids: {
                        menu: import("svelte/store").Writable<string>;
                        trigger: import("svelte/store").Writable<string>;
                    };
                    elements: {
                        subTrigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
                            set: (this: void, value: boolean) => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
                        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerleave" | "pointermove">, ([$subOpen, $disabled, $subMenuId, $subTriggerId]: [boolean, boolean, string, string]) => {
                            readonly role: "menuitem";
                            readonly id: string;
                            readonly tabindex: -1;
                            readonly 'aria-controls': string;
                            readonly 'aria-expanded': boolean;
                            readonly 'data-state': "open" | "closed";
                            readonly 'data-disabled': true | undefined;
                            readonly 'aria-haspopop': "menu";
                        }, string>;
                        subMenu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "focusout" | "pointermove">, ([$subIsVisible, $subMenuId, $subTriggerId]: [boolean, string, string]) => {
                            readonly role: "menu";
                            readonly hidden: true | undefined;
                            readonly style: string;
                            readonly id: string;
                            readonly 'aria-labelledby': string;
                            readonly 'data-state': "open" | "closed";
                            readonly 'data-id': string;
                            readonly tabindex: -1;
                        }, string>;
                        subArrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
                            'data-arrow': boolean;
                            style: string;
                        }, string>;
                    };
                    states: {
                        subOpen: {
                            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
                            set: (this: void, value: boolean) => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
                        };
                    };
                    options: {
                        dir: import("svelte/store").Writable<"ltr">;
                        disabled: import("svelte/store").Writable<boolean>;
                        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
                        defaultOpen: import("svelte/store").Writable<false>;
                        onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
                        preventScroll: import("svelte/store").Writable<true>;
                        portal: import("svelte/store").Writable<string>;
                        positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
                            placement: "right-start";
                            gutter: number;
                        }>;
                        arrowSize: import("svelte/store").Writable<number>;
                        loop: import("svelte/store").Writable<false>;
                        closeOnOutsideClick: import("svelte/store").Writable<true>;
                        closeOnEscape: import("svelte/store").Writable<true>;
                        typeahead: import("svelte/store").Writable<true>;
                    };
                };
                createMenuRadioGroup: (args?: import("@melt-ui/svelte/dist/builders/menu")._CreateRadioGroupProps | undefined) => {
                    elements: {
                        radioGroup: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => {
                            role: string;
                        }, string>;
                        radioItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                            update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
                            set: (this: void, value: string | null) => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
                        }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$value]: [string | null]) => (itemProps: import("@melt-ui/svelte/dist/builders/menu")._RadioItemProps) => {
                            disabled: boolean;
                            role: string;
                            'data-state': string;
                            'aria-checked': boolean;
                            'data-disabled': boolean | undefined;
                            'data-value': string;
                            'data-orientation': string;
                            tabindex: number;
                        }, string>;
                    };
                    states: {
                        value: {
                            update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
                            set: (this: void, value: string | null) => void;
                            subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
                        };
                    };
                    helpers: {
                        isChecked: Readable<(itemValue: string) => boolean>;
                    };
                };
            };
            states: {
                open: import("svelte/store").Writable<boolean>;
            };
            options: {
                positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
                    placement: "bottom-start";
                }>;
                arrowSize: import("svelte/store").Writable<number>;
                dir: import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").TextDirection>;
                preventScroll: import("svelte/store").Writable<boolean>;
                closeOnEscape: import("svelte/store").Writable<boolean>;
                portal: import("svelte/store").Writable<string | HTMLElement | null | undefined>;
                closeOnOutsideClick: import("svelte/store").Writable<boolean>;
                loop: import("svelte/store").Writable<boolean>;
                defaultOpen: import("svelte/store").Writable<boolean>;
                open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
                onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
                forceVisible: import("svelte/store").Writable<boolean>;
                typeahead: import("svelte/store").Writable<boolean>;
                closeFocus: import("svelte/store").Writable<import("@melt-ui/svelte").FocusProp | undefined>;
                disableFocusFirstItem: import("svelte/store").Writable<boolean>;
                ids?: import("svelte/store").Writable<{
                    menu: string;
                    trigger: string;
                } | undefined> | undefined;
            };
        };
    };
    options: {
        loop: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
    };
};
export declare function getCtx(): MenubarReturn;
export declare function setMenuCtx(props: CreateMenubarMenuProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        menu: import("svelte/store").Writable<string>;
        trigger: import("svelte/store").Writable<string>;
    };
    elements: {
        menu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string | HTMLElement | null | undefined>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown">, ([$isVisible, $portal, $menuId, $triggerId, $menubarId]: [boolean, string | HTMLElement | null | undefined, string, string, string]) => {
            readonly role: "menu";
            readonly hidden: true | undefined;
            readonly style: string;
            readonly id: string;
            readonly 'aria-labelledby': string;
            readonly 'data-state': "open" | "closed";
            readonly 'data-melt-scope': string;
            readonly 'data-portal': "" | undefined;
            readonly tabindex: -1;
        }, string>;
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "pointerenter">, ([$rootOpen, $menuId, $triggerId]: [boolean, string, string]) => {
            readonly 'aria-controls': string;
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly id: string;
            readonly 'aria-haspopup': "menu";
            readonly 'data-orientation': "horizontal";
            readonly role: "menuitem";
        }, string>;
        item: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, () => {
            role: string;
            tabindex: number;
            'data-orientation': string;
        }, string>;
        arrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number | undefined>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number | undefined) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        separator: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").Orientation>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$orientation, $decorative]: [import("@melt-ui/svelte/internal/types").Orientation, boolean]) => {
            role: string;
            'aria-orientation': "vertical" | undefined;
            'aria-hidden': boolean;
            'data-orientation': import("@melt-ui/svelte/internal/types").Orientation;
        }, "separator">;
        group: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            role: string;
            'aria-labelledby': string;
        }, string>;
        groupLabel: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            id: string;
        }, string>;
    };
    builders: {
        createCheckboxItem: (props?: import("@melt-ui/svelte/dist/builders/menu")._CheckboxItemProps | undefined) => {
            elements: {
                checkboxItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                    update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
                    set: (this: void, value: boolean | "indeterminate") => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
                }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$checked, $disabled]: [boolean | "indeterminate", boolean]) => {
                    readonly role: "menuitemcheckbox";
                    readonly tabindex: -1;
                    readonly 'data-orientation': "vertical";
                    readonly 'aria-checked': "false" | "true" | "mixed";
                    readonly 'data-disabled': true | undefined;
                    readonly 'data-state': "checked" | "indeterminate" | "unchecked";
                }, string>;
            };
            states: {
                checked: {
                    update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
                    set: (this: void, value: boolean | "indeterminate") => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
                };
            };
            options: {
                disabled: import("svelte/store").Writable<boolean>;
            };
        };
        createSubmenu: (args?: import("@melt-ui/svelte/dist/builders/menu")._CreateSubmenuProps | undefined) => {
            ids: {
                menu: import("svelte/store").Writable<string>;
                trigger: import("svelte/store").Writable<string>;
            };
            elements: {
                subTrigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                    update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
                    set: (this: void, value: boolean) => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
                }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerleave" | "pointermove">, ([$subOpen, $disabled, $subMenuId, $subTriggerId]: [boolean, boolean, string, string]) => {
                    readonly role: "menuitem";
                    readonly id: string;
                    readonly tabindex: -1;
                    readonly 'aria-controls': string;
                    readonly 'aria-expanded': boolean;
                    readonly 'data-state': "open" | "closed";
                    readonly 'data-disabled': true | undefined;
                    readonly 'aria-haspopop': "menu";
                }, string>;
                subMenu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "focusout" | "pointermove">, ([$subIsVisible, $subMenuId, $subTriggerId]: [boolean, string, string]) => {
                    readonly role: "menu";
                    readonly hidden: true | undefined;
                    readonly style: string;
                    readonly id: string;
                    readonly 'aria-labelledby': string;
                    readonly 'data-state': "open" | "closed";
                    readonly 'data-id': string;
                    readonly tabindex: -1;
                }, string>;
                subArrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
                    'data-arrow': boolean;
                    style: string;
                }, string>;
            };
            states: {
                subOpen: {
                    update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
                    set: (this: void, value: boolean) => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
                };
            };
            options: {
                dir: import("svelte/store").Writable<"ltr">;
                disabled: import("svelte/store").Writable<boolean>;
                open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
                defaultOpen: import("svelte/store").Writable<false>;
                onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
                preventScroll: import("svelte/store").Writable<true>;
                portal: import("svelte/store").Writable<string>;
                positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
                    placement: "right-start";
                    gutter: number;
                }>;
                arrowSize: import("svelte/store").Writable<number>;
                loop: import("svelte/store").Writable<false>;
                closeOnOutsideClick: import("svelte/store").Writable<true>;
                closeOnEscape: import("svelte/store").Writable<true>;
                typeahead: import("svelte/store").Writable<true>;
            };
        };
        createMenuRadioGroup: (args?: import("@melt-ui/svelte/dist/builders/menu")._CreateRadioGroupProps | undefined) => {
            elements: {
                radioGroup: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => {
                    role: string;
                }, string>;
                radioItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
                    update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
                    set: (this: void, value: string | null) => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
                }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$value]: [string | null]) => (itemProps: import("@melt-ui/svelte/dist/builders/menu")._RadioItemProps) => {
                    disabled: boolean;
                    role: string;
                    'data-state': string;
                    'aria-checked': boolean;
                    'data-disabled': boolean | undefined;
                    'data-value': string;
                    'data-orientation': string;
                    tabindex: number;
                }, string>;
            };
            states: {
                value: {
                    update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
                    set: (this: void, value: string | null) => void;
                    subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
                };
            };
            helpers: {
                isChecked: Readable<(itemValue: string) => boolean>;
            };
        };
    };
    states: {
        open: import("svelte/store").Writable<boolean>;
    };
    options: {
        positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "bottom-start";
        }>;
        arrowSize: import("svelte/store").Writable<number>;
        dir: import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").TextDirection>;
        preventScroll: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        portal: import("svelte/store").Writable<string | HTMLElement | null | undefined>;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        loop: import("svelte/store").Writable<boolean>;
        defaultOpen: import("svelte/store").Writable<boolean>;
        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
        onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
        forceVisible: import("svelte/store").Writable<boolean>;
        typeahead: import("svelte/store").Writable<boolean>;
        closeFocus: import("svelte/store").Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        disableFocusFirstItem: import("svelte/store").Writable<boolean>;
        ids?: import("svelte/store").Writable<{
            menu: string;
            trigger: string;
        } | undefined> | undefined;
    };
};
export declare function getMenuCtx(): MenubarMenuReturn;
export declare function setSubMenuCtx(props: CreateMenubarSubmenuProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        menu: import("svelte/store").Writable<string>;
        trigger: import("svelte/store").Writable<string>;
    };
    elements: {
        subTrigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerleave" | "pointermove">, ([$subOpen, $disabled, $subMenuId, $subTriggerId]: [boolean, boolean, string, string]) => {
            readonly role: "menuitem";
            readonly id: string;
            readonly tabindex: -1;
            readonly 'aria-controls': string;
            readonly 'aria-expanded': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'data-disabled': true | undefined;
            readonly 'aria-haspopop': "menu";
        }, string>;
        subMenu: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[Readable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "focusout" | "pointermove">, ([$subIsVisible, $subMenuId, $subTriggerId]: [boolean, string, string]) => {
            readonly role: "menu";
            readonly hidden: true | undefined;
            readonly style: string;
            readonly id: string;
            readonly 'aria-labelledby': string;
            readonly 'data-state': "open" | "closed";
            readonly 'data-id': string;
            readonly tabindex: -1;
        }, string>;
        subArrow: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
    };
    states: {
        subOpen: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        dir: import("svelte/store").Writable<"ltr">;
        disabled: import("svelte/store").Writable<boolean>;
        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
        defaultOpen: import("svelte/store").Writable<false>;
        onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
        preventScroll: import("svelte/store").Writable<true>;
        portal: import("svelte/store").Writable<string>;
        positioning: import("svelte/store").Writable<import("@melt-ui/svelte/internal/actions").FloatingConfig | {
            placement: "right-start";
            gutter: number;
        }>;
        arrowSize: import("svelte/store").Writable<number>;
        loop: import("svelte/store").Writable<false>;
        closeOnOutsideClick: import("svelte/store").Writable<true>;
        closeOnEscape: import("svelte/store").Writable<true>;
        typeahead: import("svelte/store").Writable<true>;
    };
};
export declare function getSubMenuCtx(): MenubarSubReturn;
export declare function setRadioGroupCtx(props: CreateMenuRadioGroupProps): {
    elements: {
        radioGroup: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => {
            role: string;
        }, string>;
        radioItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
            set: (this: void, value: string | null) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
        }], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$value]: [string | null]) => (itemProps: import("@melt-ui/svelte/dist/builders/menu")._RadioItemProps) => {
            disabled: boolean;
            role: string;
            'data-state': string;
            'aria-checked': boolean;
            'data-disabled': boolean | undefined;
            'data-value': string;
            'data-orientation': string;
            tabindex: number;
        }, string>;
    };
    states: {
        value: {
            update: (updater: import("svelte/store").Updater<string | null>, sideEffect?: ((newValue: string | null) => void) | undefined) => void;
            set: (this: void, value: string | null) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string | null>, invalidate?: import("svelte/store").Invalidator<string | null> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    helpers: {
        isChecked: Readable<(itemValue: string) => boolean>;
    };
};
export declare function setRadioItemCtx(value: string): MenubarRadioGroupReturn;
export declare function getContent(sideOffset?: number): MenubarMenuReturn;
export declare function getSubContent(sideOffset?: number): MenubarSubReturn;
export declare function setCheckboxItem(props: CreateMenuCheckboxItemProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        checkboxItem: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
            set: (this: void, value: boolean | "indeterminate") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerdown" | "pointerleave" | "pointermove">, ([$checked, $disabled]: [boolean | "indeterminate", boolean]) => {
            readonly role: "menuitemcheckbox";
            readonly tabindex: -1;
            readonly 'data-orientation': "vertical";
            readonly 'aria-checked': "false" | "true" | "mixed";
            readonly 'data-disabled': true | undefined;
            readonly 'data-state': "checked" | "indeterminate" | "unchecked";
        }, string>;
    };
    states: {
        checked: {
            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
            set: (this: void, value: boolean | "indeterminate") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
    };
};
export declare function getCheckboxIndicator(): {
    update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
    set: (this: void, value: boolean | "indeterminate") => void;
    subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
};
export declare function getRadioIndicator(): {
    isChecked: Readable<(itemValue: string) => boolean>;
    value: string;
};
export declare function setGroupCtx(): {
    group: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
        role: string;
        'aria-labelledby': string;
    }, string>;
    id: string;
};
export declare function getGroupLabel(): {
    groupLabel: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
        id: string;
    }, string>;
    id: string;
};
export declare function setArrow(size?: number): MenubarMenuReturn;
