import { SvelteComponent } from "svelte";
import type { SubTriggerProps } from "../types.js";
declare const __propDef: {
    props: SubTriggerProps;
    slots: {
        default: {
            builder: {
                readonly role: "menuitem";
                readonly id: string;
                readonly tabindex: -1;
                readonly 'aria-controls': string;
                readonly 'aria-expanded': boolean;
                readonly 'data-state': "open" | "closed";
                readonly 'data-disabled': true | undefined;
                readonly 'aria-haspopop': "menu";
            } & {
                [x: `data-melt-${string}`]: "";
            } & {
                action: (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focusin" | "focusout" | "pointerleave" | "pointermove">;
            };
            attrs: {
                "aria-disabled": boolean;
                "data-disabled": string;
            } | {
                "aria-disabled"?: undefined;
                "data-disabled"?: undefined;
            };
        };
    };
    events: {
        keydown: import("../../../index.js").CustomEventHandler<KeyboardEvent, HTMLDivElement>;
        click: import("../../../index.js").CustomEventHandler<PointerEvent, HTMLDivElement>;
        focusin: import("../../../index.js").CustomEventHandler<FocusEvent, HTMLDivElement>;
        focusout: import("../../../index.js").CustomEventHandler<FocusEvent, HTMLDivElement>;
        pointerleave: import("../../../index.js").CustomEventHandler<PointerEvent, HTMLDivElement>;
        pointermove: import("../../../index.js").CustomEventHandler<PointerEvent, HTMLDivElement>;
    };
};
export type MenubarSubTriggerProps = typeof __propDef.props;
export type MenubarSubTriggerEvents = typeof __propDef.events;
export type MenubarSubTriggerSlots = typeof __propDef.slots;
export default class MenubarSubTrigger extends SvelteComponent<MenubarSubTriggerProps, MenubarSubTriggerEvents, MenubarSubTriggerSlots> {
}
export {};
