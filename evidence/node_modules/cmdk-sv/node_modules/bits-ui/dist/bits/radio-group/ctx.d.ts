/// <reference types="svelte" />
import { type CreateRadioGroupProps, type RadioGroup as RadioGroupReturn } from "@melt-ui/svelte";
import type { Readable } from "svelte/store";
export declare const getAttrs: (part: "root" | "item" | "input") => Record<string, string>;
export declare function setCtx(props: CreateRadioGroupProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        root: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>, import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").Orientation>], import("svelte/action").Action<any, any, Record<never, any>>, ([$required, $orientation]: [boolean, import("@melt-ui/svelte/internal/types").Orientation]) => {
            readonly role: "radiogroup";
            readonly 'aria-required': boolean;
            readonly 'data-orientation': import("@melt-ui/svelte/internal/types").Orientation;
        }, string>;
        item: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<string>, sideEffect?: ((newValue: string) => void) | undefined) => void;
            set: (this: void, value: string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string>, invalidate?: import("svelte/store").Invalidator<string> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").Orientation>, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click" | "focus">, ([$value, $orientation, $disabled]: [string, import("@melt-ui/svelte/internal/types").Orientation, boolean]) => (props: import("@melt-ui/svelte").RadioGroupItemProps) => {
            readonly disabled: boolean;
            readonly 'data-value': string;
            readonly 'data-orientation': import("@melt-ui/svelte/internal/types").Orientation;
            readonly 'data-disabled': true | undefined;
            readonly 'data-state': "checked" | "unchecked";
            readonly 'aria-checked': boolean;
            readonly type: "button";
            readonly role: "radio";
            readonly tabindex: 0 | -1;
        }, string>;
        hiddenInput: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<boolean>, {
            update: (updater: import("svelte/store").Updater<string>, sideEffect?: ((newValue: string) => void) | undefined) => void;
            set: (this: void, value: string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string>, invalidate?: import("svelte/store").Invalidator<string> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], (_node: HTMLInputElement) => void, ([$disabled, $value, $required]: [boolean, string, boolean]) => {
            disabled: boolean | undefined;
            value: string;
            required: boolean;
            type: string;
            'aria-hidden': boolean;
            hidden: boolean;
            tabIndex: number;
            style: string;
        }, string>;
    };
    states: {
        value: {
            update: (updater: import("svelte/store").Updater<string>, sideEffect?: ((newValue: string) => void) | undefined) => void;
            set: (this: void, value: string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string>, invalidate?: import("svelte/store").Invalidator<string> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    helpers: {
        isChecked: Readable<(itemValue: string) => boolean>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        onValueChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<string> | undefined> | undefined;
        defaultValue: import("svelte/store").Writable<string | undefined>;
        required: import("svelte/store").Writable<boolean>;
        loop: import("svelte/store").Writable<boolean>;
        orientation: import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").Orientation>;
    };
};
export declare function getCtx(): RadioGroupReturn;
export declare function setItemCtx(value: string): RadioGroupReturn;
export declare function getRadioIndicator(): {
    isChecked: Readable<(itemValue: string) => boolean>;
    value: string;
};
