/// <reference types="svelte" />
import { type CreateAvatarProps, type Avatar as AvatarReturn } from "@melt-ui/svelte";
export declare const getAttrs: (part: "root" | "image" | "fallback") => Record<string, string>;
export declare function setCtx(props: CreateAvatarProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        image: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<string>, {
            update: (updater: import("svelte/store").Updater<"error" | "loading" | "loaded">, sideEffect?: ((newValue: "error" | "loading" | "loaded") => void) | undefined) => void;
            set: (this: void, value: "error" | "loading" | "loaded") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<"error" | "loading" | "loaded">, invalidate?: import("svelte/store").Invalidator<"error" | "loading" | "loaded"> | undefined): import("svelte/store").Unsubscriber;
        }], import("svelte/action").Action<any, any, Record<never, any>>, ([$src, $loadingStatus]: [string, "error" | "loading" | "loaded"]) => {
            src: string;
            style: string;
        }, "avatar-image">;
        fallback: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<"error" | "loading" | "loaded">, sideEffect?: ((newValue: "error" | "loading" | "loaded") => void) | undefined) => void;
            set: (this: void, value: "error" | "loading" | "loaded") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<"error" | "loading" | "loaded">, invalidate?: import("svelte/store").Invalidator<"error" | "loading" | "loaded"> | undefined): import("svelte/store").Unsubscriber;
        }], import("svelte/action").Action<any, any, Record<never, any>>, ([$loadingStatus]: ["error" | "loading" | "loaded"]) => {
            style: string | undefined;
            hidden: boolean | undefined;
        }, "avatar-fallback">;
    };
    states: {
        loadingStatus: {
            update: (updater: import("svelte/store").Updater<"error" | "loading" | "loaded">, sideEffect?: ((newValue: "error" | "loading" | "loaded") => void) | undefined) => void;
            set: (this: void, value: "error" | "loading" | "loaded") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<"error" | "loading" | "loaded">, invalidate?: import("svelte/store").Invalidator<"error" | "loading" | "loaded"> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        src: import("svelte/store").Writable<string>;
        delayMs: import("svelte/store").Writable<number>;
    };
};
export declare function getImage(src?: string | undefined | null): AvatarReturn;
export declare function getCtx(): AvatarReturn;
