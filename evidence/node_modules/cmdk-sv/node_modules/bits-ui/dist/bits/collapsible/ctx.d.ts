/// <reference types="svelte" />
import { type Collapsible as CollapsibleReturn, type CreateCollapsibleProps } from "@melt-ui/svelte";
export declare const getAttrs: (part: "root" | "content" | "trigger") => Record<string, string>;
export declare function setCtx(props: CreateCollapsibleProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        root: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$open, $disabled]: [boolean, boolean]) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
        }, string>;
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"click">, ([$open, $disabled]: [boolean, boolean]) => {
            readonly 'data-state': "open" | "closed";
            readonly 'data-disabled': true | undefined;
            readonly disabled: true | undefined;
        }, string>;
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$isVisible, $disabled]: [boolean, boolean]) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
            hidden: boolean | undefined;
            style: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        forceVisible: import("svelte/store").Writable<boolean>;
    };
};
export declare function getCtx(): CollapsibleReturn;
