/// <reference types="svelte" />
import { type CreateDialogProps, type Dialog as DialogReturn } from "@melt-ui/svelte";
export declare const getAttrs: (part: "content" | "trigger" | "close" | "description" | "overlay" | "portal" | "title") => Record<string, string>;
type SetProps = CreateDialogProps;
export declare function setCtx(props: SetProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        title: import("svelte/store").Writable<string>;
        description: import("svelte/store").Writable<string>;
        content: import("svelte/store").Writable<string>;
    };
    elements: {
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>, import("svelte/store").Writable<string>], (node: HTMLElement) => {
            destroy: () => void;
        }, ([$isVisible, $contentId, $descriptionId, $titleId]: [boolean, string, string, string]) => {
            id: string;
            role: "dialog" | "alertdialog";
            'aria-describedby': string;
            'aria-labelledby': string;
            'data-state': string;
            tabindex: number;
            hidden: boolean | undefined;
            style: string;
        }, string>;
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$open, $contentId]: [boolean, string]) => {
            readonly 'aria-haspopup': "dialog";
            readonly 'aria-expanded': boolean;
            readonly 'aria-controls': string;
            readonly type: "button";
        }, string>;
        title: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$titleId]: [string]) => {
            id: string;
        }, string>;
        description: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Writable<string>], import("svelte/action").Action<any, any, Record<never, any>>, ([$descriptionId]: [string]) => {
            id: string;
        }, string>;
        overlay: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>], <Node_1 extends unknown>(node: HTMLElement) => {
            destroy(): void;
        }, ([$isVisible]: [boolean]) => {
            readonly hidden: true | undefined;
            readonly tabindex: -1;
            readonly style: string;
            readonly 'aria-hidden': true;
            readonly 'data-state': "open" | "closed";
        }, string>;
        close: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, () => {
            readonly type: "button";
        }, string>;
        portalled: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Writable<string | HTMLElement | null>, <Node_2 extends unknown>(node: HTMLElement) => {
            destroy(): void;
        }, ($portal: string | HTMLElement | null) => {
            'data-portal': string | undefined;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    options: {
        open?: import("svelte/store").Writable<import("svelte/store").Writable<boolean> | undefined> | undefined;
        forceVisible: import("svelte/store").Writable<boolean>;
        role: import("svelte/store").Writable<"dialog" | "alertdialog">;
        defaultOpen: import("svelte/store").Writable<boolean>;
        onOpenChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean> | undefined> | undefined;
        preventScroll: import("svelte/store").Writable<boolean>;
        portal: import("svelte/store").Writable<string | HTMLElement | null>;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        closeFocus: import("svelte/store").Writable<import("@melt-ui/svelte").FocusProp | undefined>;
        openFocus: import("svelte/store").Writable<import("@melt-ui/svelte").FocusProp | undefined>;
    };
};
export declare function getCtx(): DialogReturn;
export {};
