/// <reference types="svelte" />
import { type Checkbox as CheckboxReturn, type CreateCheckboxProps } from "@melt-ui/svelte";
export declare const getAttrs: (part: "root" | "input" | "indicator") => Record<string, string>;
export declare function setCtx(props: CreateCheckboxProps): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    elements: {
        root: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
            set: (this: void, value: boolean | "indeterminate") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$checked, $disabled, $required]: [boolean | "indeterminate", boolean, boolean]) => {
            readonly 'data-disabled': true | undefined;
            readonly 'data-state': "checked" | "indeterminate" | "unchecked";
            readonly type: "button";
            readonly role: "checkbox";
            readonly 'aria-checked': boolean | "mixed";
            readonly 'aria-required': boolean;
        }, "checkbox">;
        input: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
            set: (this: void, value: boolean | "indeterminate") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<string | undefined>, import("svelte/store").Writable<string>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$checked, $name, $value, $required, $disabled]: [boolean | "indeterminate", string | undefined, string, boolean, boolean]) => {
            readonly type: "checkbox";
            readonly 'aria-hidden': true;
            readonly hidden: true;
            readonly tabindex: -1;
            readonly name: string | undefined;
            readonly value: string;
            readonly checked: boolean;
            readonly required: boolean;
            readonly disabled: true | undefined;
            readonly style: string;
        }, "checkbox-input">;
    };
    states: {
        checked: {
            update: (updater: import("svelte/store").Updater<boolean | "indeterminate">, sideEffect?: ((newValue: boolean | "indeterminate") => void) | undefined) => void;
            set: (this: void, value: boolean | "indeterminate") => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean | "indeterminate">, invalidate?: import("svelte/store").Invalidator<boolean | "indeterminate"> | undefined): import("svelte/store").Unsubscriber;
        };
    };
    helpers: {
        isIndeterminate: import("svelte/store").Readable<boolean>;
        isChecked: import("svelte/store").Readable<boolean>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        value: import("svelte/store").Writable<string>;
        name: import("svelte/store").Writable<string | undefined>;
        required: import("svelte/store").Writable<boolean>;
        onCheckedChange?: import("svelte/store").Writable<import("@melt-ui/svelte/internal/helpers").ChangeFn<boolean | "indeterminate"> | undefined> | undefined;
    };
};
export declare function getCtx(): CheckboxReturn;
