/// <reference types="svelte" />
import { type Accordion as AccordionReturn, type CreateAccordionProps } from "@melt-ui/svelte";
import type { AccordionItemProps } from "./types.js";
export declare const getAttrs: (part: "root" | "content" | "header" | "item" | "trigger") => Record<string, string>;
type GetReturn = AccordionReturn;
export declare function setCtx<Multiple extends boolean>(props: CreateAccordionProps<Multiple>): {
    updateOption: <K extends string, V extends unknown>(key: K, value: V | undefined) => void;
    ids: {
        [x: string]: string;
    };
    elements: {
        root: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => {
            'data-melt-id': string;
        }, string>;
        item: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<{
            update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
            set: (this: void, value: string | string[] | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/action").Action<any, any, Record<never, any>>, ($value: string | string[] | undefined) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
        }, string>;
        trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
            set: (this: void, value: string | string[] | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$value, $disabled]: [string | string[] | undefined, boolean]) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
            disabled: boolean | undefined;
            'aria-expanded': boolean;
            'aria-disabled': boolean;
            'data-disabled': boolean | undefined;
            'data-value': string;
            'data-state': string;
        }, string>;
        content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
            set: (this: void, value: string | string[] | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], (node: HTMLElement) => void, ([$value, $disabled, $forceVisible]: [string | string[] | undefined, boolean, boolean]) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
            'data-state': string;
            'data-disabled': boolean | undefined;
            'data-value': string;
            hidden: boolean | undefined;
            style: string;
        }, string>;
        heading: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (props: import("@melt-ui/svelte/index.js").AccordionHeadingProps) => {
            role: string;
            'aria-level': number;
            'data-heading-level': number;
        }, string>;
    };
    states: {
        value: import("svelte/store").Writable<import("@melt-ui/svelte/internal/types").WhenTrue<Multiple, string[], string, string | string[]> | undefined>;
    };
    helpers: {
        isSelected: import("svelte/store").Readable<(key: string) => boolean>;
    };
    options: {
        disabled: import("svelte/store").Writable<boolean>;
        forceVisible: import("svelte/store").Writable<boolean>;
        multiple: import("svelte/store").Writable<false | Multiple>;
    };
};
export declare function getCtx(): GetReturn;
export declare function setItem(props: AccordionItemProps): {
    item: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<{
        update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
        set: (this: void, value: string | string[] | undefined) => void;
        subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
    }, import("svelte/action").Action<any, any, Record<never, any>>, ($value: string | string[] | undefined) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
        'data-state': string;
        'data-disabled': boolean | undefined;
    }, string>;
    props: AccordionItemProps;
};
export declare function getItemProps(): AccordionItemProps;
export declare function getContent(): {
    content: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
        update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
        set: (this: void, value: string | string[] | undefined) => void;
        subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
    }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], (node: HTMLElement) => void, ([$value, $disabled, $forceVisible]: [string | string[] | undefined, boolean, boolean]) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
        'data-state': string;
        'data-disabled': boolean | undefined;
        'data-value': string;
        hidden: boolean | undefined;
        style: string;
    }, string>;
    props: string;
    isSelected: import("svelte/store").Readable<(key: string) => boolean>;
    value: import("svelte/store").Writable<string | undefined>;
};
export declare function getTrigger(): {
    props: string;
    trigger: import("@melt-ui/svelte/internal/helpers").ExplicitBuilderReturn<[{
        update: (updater: import("svelte/store").Updater<string | string[] | undefined>, sideEffect?: ((newValue: string | string[] | undefined) => void) | undefined) => void;
        set: (this: void, value: string | string[] | undefined) => void;
        subscribe(this: void, run: import("svelte/store").Subscriber<string | string[] | undefined>, invalidate?: import("svelte/store").Invalidator<string | string[] | undefined> | undefined): import("svelte/store").Unsubscriber;
    }, import("svelte/store").Writable<boolean>], (node: HTMLElement) => import("@melt-ui/svelte/internal/types").MeltActionReturn<"keydown" | "click">, ([$value, $disabled]: [string | string[] | undefined, boolean]) => (props: import("@melt-ui/svelte/index.js").AccordionItemProps) => {
        disabled: boolean | undefined;
        'aria-expanded': boolean;
        'aria-disabled': boolean;
        'data-disabled': boolean | undefined;
        'data-value': string;
        'data-state': string;
    }, string>;
};
export {};
