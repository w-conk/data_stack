/// <reference types="svelte" />
import type { CommandProps, Context, Group, State, StateStore } from './types.js';
export declare const LIST_SELECTOR = "[data-cmdk-list-sizer]";
export declare const GROUP_SELECTOR = "[data-cmdk-group]";
export declare const GROUP_ITEMS_SELECTOR = "[data-cmdk-group-items]";
export declare const GROUP_HEADING_SELECTOR = "[data-cmdk-group-heading]";
export declare const ITEM_SELECTOR = "[data-cmdk-item]";
export declare const VALID_ITEM_SELECTOR = "[data-cmdk-item]:not([aria-disabled=\"true\"])";
export declare const VALUE_ATTR = "data-value";
export declare const defaultFilter: (value: string, search: string) => number;
export declare function getCtx(): Context;
export declare function getState(): StateStore;
export declare function createGroup(alwaysRender: boolean | undefined): {
    id: string;
};
export declare function getGroup(): Group | undefined;
export declare function createState(initialValues?: Partial<State>): import("svelte/store").Writable<State>;
export declare function createCommand(props: CommandProps): {
    state: {
        subscribe: (this: void, run: import("svelte/store").Subscriber<State>, invalidate?: import("svelte/store").Invalidator<State> | undefined) => import("svelte/store").Unsubscriber;
        update: (this: void, updater: import("svelte/store").Updater<State>) => void;
        set: (this: void, value: State) => void;
        updateState: <K extends keyof State>(key: K, value: State[K], preventScroll?: boolean) => void;
    };
    handleRootKeydown: (e: KeyboardEvent) => void;
    commandEl: import("svelte/store").Writable<HTMLDivElement | null>;
    ids: {
        input: string;
        root: string;
        label: string;
        list: string;
    };
};
