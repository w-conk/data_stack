import { SvelteComponent } from "svelte";
import type { CommandProps } from '../types.js';
declare const __propDef: {
    props: CommandProps;
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            root: {
                action: (node: HTMLDivElement) => {
                    destroy: () => void;
                };
                attrs: {
                    role: string;
                    id: string;
                    'data-cmdk-root': string;
                };
            };
            label: {
                attrs: {
                    'data-cmdk-label': string;
                    for: string;
                    id: string;
                    style: string;
                };
            };
            stateStore: {
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("../types.js").State>, invalidate?: import("svelte/store").Invalidator<import("../types.js").State> | undefined) => import("svelte/store").Unsubscriber;
                update: (this: void, updater: import("svelte/store").Updater<import("../types.js").State>) => void;
                set: (this: void, value: import("../types.js").State) => void;
                updateState: <K extends keyof import("../types.js").State>(key: K, value: import("../types.js").State[K], preventScroll?: boolean | undefined) => void;
            };
            state: import("../types.js").State;
        };
    };
};
type CommandProps_ = typeof __propDef.props;
export { CommandProps_ as CommandProps };
export type CommandEvents = typeof __propDef.events;
export type CommandSlots = typeof __propDef.slots;
export default class Command extends SvelteComponent<CommandProps, CommandEvents, CommandSlots> {
}
