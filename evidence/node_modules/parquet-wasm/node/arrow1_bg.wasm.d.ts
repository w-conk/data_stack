/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_writerproperties_free(a: number): void;
export function writerpropertiesbuilder_new(): number;
export function writerpropertiesbuilder_build(a: number): number;
export function writerpropertiesbuilder_setWriterVersion(a: number, b: number): number;
export function writerpropertiesbuilder_setDataPageSizeLimit(a: number, b: number): number;
export function writerpropertiesbuilder_setDictionaryPageSizeLimit(a: number, b: number): number;
export function writerpropertiesbuilder_setWriteBatchSize(a: number, b: number): number;
export function writerpropertiesbuilder_setMaxRowGroupSize(a: number, b: number): number;
export function writerpropertiesbuilder_setCreatedBy(a: number, b: number, c: number): number;
export function writerpropertiesbuilder_setEncoding(a: number, b: number): number;
export function writerpropertiesbuilder_setCompression(a: number, b: number): number;
export function writerpropertiesbuilder_setDictionaryEnabled(a: number, b: number): number;
export function writerpropertiesbuilder_setStatisticsEnabled(a: number, b: number): number;
export function writerpropertiesbuilder_setMaxStatisticsSize(a: number, b: number): number;
export function writerpropertiesbuilder_setColumnEncoding(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnCompression(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnDictionaryEnabled(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnStatisticsEnabled(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnMaxStatisticsSize(a: number, b: number, c: number, d: number): number;
export function __wbg_writerpropertiesbuilder_free(a: number): void;
export function readParquet(a: number, b: number, c: number): void;
export function writeParquet(a: number, b: number, c: number): void;
export function readParquetStream(a: number, b: number, c: number, d: number): number;
export function __wbg_readablestreamgetreaderoptions_free(a: number): void;
export function readablestreamgetreaderoptions_mode(a: number): number;
export function __wbg_pipeoptions_free(a: number): void;
export function pipeoptions_preventClose(a: number): number;
export function pipeoptions_preventCancel(a: number): number;
export function pipeoptions_preventAbort(a: number): number;
export function pipeoptions_signal(a: number): number;
export function __wbg_queuingstrategy_free(a: number): void;
export function queuingstrategy_highWaterMark(a: number): number;
export function __wbg_intounderlyingsink_free(a: number): void;
export function intounderlyingsink_write(a: number, b: number): number;
export function intounderlyingsink_close(a: number): number;
export function intounderlyingsink_abort(a: number, b: number): number;
export function __wbg_intounderlyingbytesource_free(a: number): void;
export function intounderlyingbytesource_type(a: number, b: number): void;
export function intounderlyingbytesource_autoAllocateChunkSize(a: number): number;
export function intounderlyingbytesource_start(a: number, b: number): void;
export function intounderlyingbytesource_pull(a: number, b: number): number;
export function intounderlyingbytesource_cancel(a: number): void;
export function __wbg_intounderlyingsource_free(a: number): void;
export function intounderlyingsource_pull(a: number, b: number): number;
export function intounderlyingsource_cancel(a: number): void;
export function rust_zstd_wasm_shim_malloc(a: number): number;
export function rust_zstd_wasm_shim_calloc(a: number, b: number): number;
export function rust_zstd_wasm_shim_free(a: number): void;
export function rust_zstd_wasm_shim_memcpy(a: number, b: number, c: number): number;
export function rust_zstd_wasm_shim_memmove(a: number, b: number, c: number): number;
export function rust_zstd_wasm_shim_memset(a: number, b: number, c: number): number;
export function BrotliDecoderCreateInstance(a: number, b: number, c: number): number;
export function BrotliDecoderSetParameter(a: number, b: number, c: number): void;
export function BrotliDecoderDecompressPrealloc(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function BrotliDecoderDecompressWithReturnInfo(a: number, b: number, c: number, d: number, e: number): void;
export function BrotliDecoderDecompress(a: number, b: number, c: number, d: number): number;
export function BrotliDecoderDecompressStream(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function BrotliDecoderDecompressStreaming(a: number, b: number, c: number, d: number, e: number): number;
export function BrotliDecoderMallocU8(a: number, b: number): number;
export function BrotliDecoderFreeU8(a: number, b: number, c: number): void;
export function BrotliDecoderMallocUsize(a: number, b: number): number;
export function BrotliDecoderFreeUsize(a: number, b: number, c: number): void;
export function BrotliDecoderDestroyInstance(a: number): void;
export function BrotliDecoderHasMoreOutput(a: number): number;
export function BrotliDecoderTakeOutput(a: number, b: number): number;
export function BrotliDecoderIsUsed(a: number): number;
export function BrotliDecoderIsFinished(a: number): number;
export function BrotliDecoderGetErrorCode(a: number): number;
export function BrotliDecoderGetErrorString(a: number): number;
export function BrotliDecoderErrorString(a: number): number;
export function BrotliDecoderVersion(): number;
export function __wbg_schema_free(a: number): void;
export function wasmMemory(): number;
export function _functionTable(): number;
export function __wbg_table_free(a: number): void;
export function table_schema(a: number): number;
export function table_recordBatch(a: number, b: number): number;
export function table_toFFI(a: number): number;
export function table_intoFFI(a: number): number;
export function table_intoIPCStream(a: number, b: number): void;
export function table_fromIPCStream(a: number, b: number, c: number): void;
export function __wbg_ffitable_free(a: number): void;
export function ffitable_numBatches(a: number): number;
export function ffitable_schemaAddr(a: number): number;
export function ffitable_arrayAddr(a: number, b: number): number;
export function ffitable_drop(a: number): void;
export function table_numBatches(a: number): number;
export function __wbg_recordbatch_free(a: number): void;
export function recordbatch_numRows(a: number): number;
export function recordbatch_numColumns(a: number): number;
export function recordbatch_schema(a: number): number;
export function recordbatch_toFFI(a: number, b: number): void;
export function recordbatch_intoFFI(a: number, b: number): void;
export function recordbatch_intoIPCStream(a: number, b: number): void;
export function __wbg_ffirecordbatch_free(a: number): void;
export function ffirecordbatch_arrayAddr(a: number): number;
export function ffirecordbatch_schemaAddr(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc6960be1b21d1328(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__he70c1f135eda8e77(a: number, b: number, c: number, d: number): void;
