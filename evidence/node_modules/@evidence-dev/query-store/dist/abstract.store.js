var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractStore_subscribers;
export class AbstractStore {
    constructor() {
        _AbstractStore_subscribers.set(this, new Set());
        this.subscribe = (subFn) => {
            __classPrivateFieldGet(this, _AbstractStore_subscribers, "f").add(subFn);
            subFn(this.value());
            return () => __classPrivateFieldGet(this, _AbstractStore_subscribers, "f").delete(subFn);
        };
        this.publish = () => {
            // get value before iterating to ensure consistency
            const value = this.value();
            __classPrivateFieldGet(this, _AbstractStore_subscribers, "f").forEach((sub) => sub(value));
        };
    }
}
_AbstractStore_subscribers = new WeakMap();
//# sourceMappingURL=abstract.store.js.map