/// <reference path="../../src/types/mosaic-sql.d.ts" />
export declare const mutations: {
    readonly agg: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, aggConfig: {
            sum: (string | {
                col: string;
                alias: string;
            }) | (string | {
                col: string;
                alias: string;
            })[];
            avg: (string | {
                col: string;
                alias: string;
            }) | (string | {
                col: string;
                alias: string;
            })[];
        }) => import("@uwdata/mosaic-sql").Query;
        readonly currentAsInitial: false;
    };
    readonly groupBy: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, columns: string | string[]) => import("@uwdata/mosaic-sql").Query;
        readonly currentAsInitial: false;
    };
    readonly orderBy: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, orderConfig: Record<string, boolean>) => import("@uwdata/mosaic-sql").Query;
        readonly currentAsInitial: true;
    };
    readonly where: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, fragment: string) => import("@uwdata/mosaic-sql").Query;
        readonly currentAsInitial: true;
    };
    readonly limit: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, l: number) => any;
        readonly currentAsInitial: true;
    };
    readonly offset: {
        readonly fn: (q: import("@uwdata/mosaic-sql").Query, o: number) => any;
        readonly currentAsInitial: true;
    };
};
//# sourceMappingURL=index.d.ts.map