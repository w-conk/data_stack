import{Command as e}from"commander";import r from"fs/promises";import o from"path";import t from"yaml";import n from"chalk";import i from"lodash.merge";import"node:crypto";import{z as a}from"zod";import s from"fs";let c=a.any().refine(e=>!!Array.isArray(e)&&(0===e.length||a.record(a.string(),a.any()).safeParse(e[0]).success),{message:"Data connector returned invalid rows"}),l=a.function(),d=a.object({rows:c.or(l),columnTypes:a.array(a.object({name:a.string(),evidenceType:a.enum(["boolean","number","string","date"]),typeFidelity:a.union([a.literal("precise"),a.literal("inferred")])})),expectedRowCount:a.number().optional()}).refine(e=>{if("function"==typeof e.rows)return!0;let r=e.rows;return!r.length||!e.columnTypes.filter(e=>!(e.name in r[0])).map(e=>e.name).length},e=>{if("function"==typeof e.rows)return{path:["columnTypes"]};let r=e.rows,o=e.columnTypes.filter(e=>!(e.name in r[0])).map(e=>e.name);return{path:["columnTypes"],message:`Datasource result has columns declared that are missing from results: ${o.join(", ")}`}}).refine(e=>{if("function"==typeof e.rows)return!0;if(e.rows.length){let r=e.columnTypes.map(e=>e.name);if(Object.keys(e.rows[0]).filter(e=>!r.includes(e)).length)return!1}return!0},e=>{if("function"==typeof e.rows)return{path:["rows"]};let r=e.columnTypes.map(e=>e.name),o=Object.keys(e.rows[0]).filter(e=>!r.includes(e));return{path:["rows"],message:`First row of results columns not provided in columnTypes: ${o.join(", ")}`}}),u=a.function().args(a.string({description:"QueryString"}).or(a.null({description:"ExceededSizeQueryString"})),a.string({description:"QueryFilepath"}),a.number({description:"Batch Size"}).or(a.null())).returns(a.promise(d.or(a.null())).or(d)),p=a.function().args(a.any({description:"Connection Options"})).returns(a.promise(a.union([a.literal(!0),a.object({reason:a.string()})]))),m=a.function().args(a.any({description:"Connection Options"}),a.string({description:"Datasource directory"})).returns(a.promise(u)),f=a.union([a.string(),a.number(),a.boolean()]),g=a.record(a.string(),a.object({title:a.string(),type:a.enum(["string","number","boolean","select","file"]),secret:a.boolean().default(!1),shown:a.boolean().optional(),virtual:a.boolean().default(!1),references:a.string().optional(),forceReference:a.boolean().default(!1),fileFormat:a.enum(["json","yaml"]).optional(),description:a.string().optional(),children:a.lazy(()=>a.record(a.string(),g)).optional(),required:a.boolean().default(!1),options:a.union([a.string(),a.object({value:f,label:a.string()})]).array().optional(),nest:a.boolean().optional(),default:f.optional()})),y=a.object({getRunner:m,supports:a.array(a.union([a.string(),a.array(a.string())])),options:g,testConnection:p,processSource:a.function().returns(a.custom(e=>e&&"object"==typeof e&&Symbol.asyncIterator in e,{message:"Expected AsyncIterator result"})).optional()}),w=a.object({filepath:a.string(),content:a.string().or(a.null()),hash:a.string().or(a.null()),name:a.string()}),h=a.object({type:a.string(),name:a.string().refine(e=>e?.toString().match(/^[a-zA-Z0-9_-]+$/)?.length),options:a.any()});function b(e){for(let r in e)"object"==typeof e[r]&&b(e[r]),"_errors"===r&&(e._errors.length&&(e.errors=Array.from(new Set(e._errors))),delete e._errors);return e}h.extend({sourceDirectory:a.string()}),a.object({source:w,result:d,name:a.string({description:"Output Table / Store name"})}),a.record(a.record(a.string().or(a.null()))),a.object({renderedFiles:a.record(a.array(a.string()))});let j=e=>Array.isArray(e)?e.map(j):"string"==typeof e?btoa(e):e&&e.constructor===Object?Object.fromEntries(Object.entries(e).map(([e,r])=>[e,j(r)])):e,$=e=>Array.isArray(e)?e.map($):"string"==typeof e?atob(e):e&&e.constructor===Object?Object.fromEntries(Object.entries(e).map(([e,r])=>[e,$(r)])):e,v=async e=>{let t=o.resolve("./");t.includes(".evidence")&&(t=o.resolve("../.."));let i=(await r.readdir(t,{withFileTypes:!0})).find(e=>"sources"===e.name&&e.isDirectory()),a=o.join(t,"sources");if(!i){if(!e)return console.warn(n.yellow("[!] No Sources Found!")),null;await r.mkdir(a,{recursive:!0}),console.info(n.green(`Created new sources directory; ${a}`))}return o.join(t,"sources")},E=e=>{let r={},o=/^EVIDENCE_SOURCE__([a-zA-Z0-1_]+)$/;for(let[t,n]of Object.entries(process.env)){let i=o.exec(t);if(!i||i?.length<2||!i[1].toLowerCase().startsWith(e.toLowerCase()))continue;let a=i[1].substring(e.length+2).split("__"),s=r;a.forEach((e,r)=>{r<a.length-1?(s[e]||(s[e]={}),s=s[e]):s[e]=n})}return r},k=async e=>{let t=await r.readdir(e);return await Promise.all(t.map(async t=>{let n=o.join(e,t);if(!(await r.stat(n)).isDirectory())return!1;let a=await S(n);if(!a)return!1;if(a.name||(a.name=n.split(o.sep).pop()),!a.name)throw Error(`Unexpected error determining datasource name, please add an explicit name in connection.yaml (${n})`);return a.options=i(a.options,await _(n)),a.options=i(a.options,E(a.name)),{...a,sourceDirectory:n}})).then(e=>e.filter(Boolean))};async function S(e){let i;let a=await r.readFile(o.join(e,"connection.yaml")).then(e=>e.toString()).catch(r=>(console.warn(n.yellow(`[!] ${e} is not a valid source; skipping`)),console.warn(r.message),!1));if(!1===a)return!1;try{i=t.parse(a)}catch(r){throw Error(`Error parsing connection.yaml file; ${e}`,{cause:r})}let s=h.safeParse(i);if(!s.success){console.error(n.bold.red(`[!] connection.yaml has errors (${e}`));let r=b(s.error.format());console.error(n.red("|   Discovered Errors:"));let o=n.red("|");throw console.error(`${o}   ${t.stringify(r).replace(/\n/g,`
${o}   `)}`),Error("Unable to load connection.yaml")}return s.data}async function _(e){let n=o.join(e,"connection.options.yaml");if(!await r.stat(n).then(()=>!0).catch(()=>!1))return{};let i=await r.readFile(n).then(e=>e.toString());try{return $(t.parse(i))}catch(r){throw Error(`Error parsing connection.options.yaml file; ${e}`,{cause:r})}}let O=async e=>(await r.readdir(e)).includes("node_modules"),P=async e=>{let t=e??process.cwd(),n=o.parse(t.split("/node_modules")[0]),i=`${n.dir}/${n.base}`,a=i;for((await r.stat(i)).isFile()&&(i=o.parse(i).dir);!await O(i);){if(i===o.parse(i).root)throw Error(`Could not locate node_modules! ${JSON.stringify({startingPoint:e,initP:a})}`);i=o.parse(i).dir}return i},C=a.union([a.object({main:a.string()},{description:"Use the main field of the package.json"}),a.object({exports:a.object({".":a.string()})},{description:"Use the exports field of the package.json"}),a.object({svelte:a.string()},{description:"Use the svelte field of the package.json"}).optional()]),D=a.object({name:a.string(),evidence:a.undefined()}),T=a.intersection(D,C),A=a.intersection(D.extend({evidence:a.object({components:a.boolean().optional(),datasources:a.array(a.union([a.string(),a.array(a.string())])).optional(),icon:a.string().optional()})}),C),x=a.union([T,A]),F=async e=>{try{if(!(await r.stat(e)).isDirectory())return!1}catch(r){return r instanceof Error&&"ENOENT"!==r.code?console.warn(n.yellow(`[!] An error occured while loading ${n.bold(`"${e.split("node_modules/")[1]}"`)}: ${r}.`)):console.warn(n.yellow(`[!] ${n.bold(`"${e.split("node_modules/")[1]}"`)} could not be found in your node_modules. Check for spelling errors or try running npm install.`)),!1}if(!(await r.readdir(e)).includes("package.json"))return!1;let o=await r.readFile(`${e}/package.json`).then(e=>JSON.parse(e.toString())),t=x.safeParse(o);return t.success?t.data:(console.warn(n.yellow(`[!] ${n.bold(`"${e.split("node_modules/")[1]}"`)} could not be loaded as a plugin`)),console.warn(b(t.error.format())),!1)},N=a.object({overrides:a.array(a.string()).default([]),aliases:a.record(a.string({description:"Component Name"}),a.string({description:"Alias to apply"})).default({}),provides:a.array(a.string()).default([])}),z=a.object({overrides:a.array(a.string()).default([])}),U=a.object({components:a.record(a.string(),N),datasources:a.record(a.string({description:"Plugin Package Name"}),z).default({})}).nonstrict(),R=e=>{let r=`${e}/evidence.plugins.yaml`;try{let e=s.readFileSync(r,"utf8").toString(),o=t.parse(e.replaceAll(/($|\s)(@.+):/g,'$1"$2":')),i=U.safeParse(o);if(!i.success){console.error(n.bold.red(`[!] evidence.plugins.yaml does not contain a valid configuration. 
    Plugins will not be loaded. This may lead to unexpected behavior.`));let e=b(i.error.format());console.error(n.red("|   Discovered Errors:"));let r=n.red("|");throw console.error(`${r}   ${t.stringify(e).replace(/\n/g,`
${r}   `)}`),Error("Invalid evidence.plugins.yaml")}return i.data}catch(e){if(!(e instanceof Error))throw e;if(e.message.startsWith("ENOENT"))throw Error(`Could not find evidence plugins file. (Look at ${r})`,{cause:e});throw e}},I=e=>async r=>{let t=o.resolve(e,"node_modules",r),n=await F(t);return!!n&&{package:n,path:t}},L=async e=>{let r=R(e);return{components:await Promise.all(Object.keys(r.components).map(I(e))).then(e=>e.filter(Boolean)),datasources:await Promise.all(Object.keys(r.datasources).map(I(e))).then(e=>e.filter(e=>e&&!!e.package.evidence?.datasources))}};async function B(e){return e||(e=await P()),await L(e)}let Q=async(e,r,o)=>{let i=new URL(`file:///${e}`).href,a=await import(i),s=y.safeParse({...a,supports:r});if(s.success)return s.data;{console.error(n.bold.red(`[!] Datasource connector "${o}" is invalid`));let e=b(s.error.format());console.error(n.red("|   Discovered Errors:"));let r=n.red("|");console.error(`${r}   ${t.stringify(e).replace(/\n/g,`
${r}   `)}`),process.exit(1)}};async function J(e,r){let t=r??await B();return await t.datasources.reduce(async(e,r)=>{let t=await e,i=await Q(o.join(r.path,r.package.main),r.package.evidence?.datasources??[],r.package.name);return r.package.evidence.datasources?.flat().forEach(e=>{if(e in t)throw console.error(n.red(`[!] Multiple datasource connectors found for ${e}. Please ensure that only one is used.`)),Error("Datasource plugin conflict found!");t[e]={package:r,factory:i.getRunner,options:i.options,testConnection:i.testConnection,processSource:i.processSource}}),t},Promise.resolve({}))}let W=new e;W.name("plugin-connector-debug"),W.description("CLI to debug the evidence plugin connector"),W.command("print-config").description("Print a parsed configuration").action(async()=>{let e=await P();console.log(await R(e))}),W.command("get-sources").description("Print a parsed list of sources").action(async()=>{let e=await v();if(!e)throw Error("missing sources directory");console.log(await k(e))}),W.command("get-source-plugins").description("Print a parsed list of datasource plugins").action(async()=>{console.log(await J())}),W.command("root-modules-dir").description("Print the detected node_modules directory path").action(async()=>{console.log(await P())}),W.parse();
//# sourceMappingURL=cli.js.map
